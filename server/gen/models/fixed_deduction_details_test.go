// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFixedDeductionDetails(t *testing.T) {
	t.Parallel()

	query := FixedDeductionDetails()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFixedDeductionDetailsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FixedDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFixedDeductionDetailsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FixedDeductionDetails().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FixedDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFixedDeductionDetailsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FixedDeductionDetailSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FixedDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFixedDeductionDetailsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FixedDeductionDetailExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if FixedDeductionDetail exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FixedDeductionDetailExists to return true, but got false.")
	}
}

func testFixedDeductionDetailsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	fixedDeductionDetailFound, err := FindFixedDeductionDetail(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if fixedDeductionDetailFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFixedDeductionDetailsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FixedDeductionDetails().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFixedDeductionDetailsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FixedDeductionDetails().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFixedDeductionDetailsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fixedDeductionDetailOne := &FixedDeductionDetail{}
	fixedDeductionDetailTwo := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, fixedDeductionDetailOne, fixedDeductionDetailDBTypes, false, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, fixedDeductionDetailTwo, fixedDeductionDetailDBTypes, false, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fixedDeductionDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fixedDeductionDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FixedDeductionDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFixedDeductionDetailsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	fixedDeductionDetailOne := &FixedDeductionDetail{}
	fixedDeductionDetailTwo := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, fixedDeductionDetailOne, fixedDeductionDetailDBTypes, false, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, fixedDeductionDetailTwo, fixedDeductionDetailDBTypes, false, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fixedDeductionDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fixedDeductionDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FixedDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func fixedDeductionDetailBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FixedDeductionDetail) error {
	*o = FixedDeductionDetail{}
	return nil
}

func fixedDeductionDetailAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FixedDeductionDetail) error {
	*o = FixedDeductionDetail{}
	return nil
}

func fixedDeductionDetailAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FixedDeductionDetail) error {
	*o = FixedDeductionDetail{}
	return nil
}

func fixedDeductionDetailBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FixedDeductionDetail) error {
	*o = FixedDeductionDetail{}
	return nil
}

func fixedDeductionDetailAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FixedDeductionDetail) error {
	*o = FixedDeductionDetail{}
	return nil
}

func fixedDeductionDetailBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FixedDeductionDetail) error {
	*o = FixedDeductionDetail{}
	return nil
}

func fixedDeductionDetailAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FixedDeductionDetail) error {
	*o = FixedDeductionDetail{}
	return nil
}

func fixedDeductionDetailBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FixedDeductionDetail) error {
	*o = FixedDeductionDetail{}
	return nil
}

func fixedDeductionDetailAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FixedDeductionDetail) error {
	*o = FixedDeductionDetail{}
	return nil
}

func testFixedDeductionDetailsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FixedDeductionDetail{}
	o := &FixedDeductionDetail{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail object: %s", err)
	}

	AddFixedDeductionDetailHook(boil.BeforeInsertHook, fixedDeductionDetailBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	fixedDeductionDetailBeforeInsertHooks = []FixedDeductionDetailHook{}

	AddFixedDeductionDetailHook(boil.AfterInsertHook, fixedDeductionDetailAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	fixedDeductionDetailAfterInsertHooks = []FixedDeductionDetailHook{}

	AddFixedDeductionDetailHook(boil.AfterSelectHook, fixedDeductionDetailAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	fixedDeductionDetailAfterSelectHooks = []FixedDeductionDetailHook{}

	AddFixedDeductionDetailHook(boil.BeforeUpdateHook, fixedDeductionDetailBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	fixedDeductionDetailBeforeUpdateHooks = []FixedDeductionDetailHook{}

	AddFixedDeductionDetailHook(boil.AfterUpdateHook, fixedDeductionDetailAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	fixedDeductionDetailAfterUpdateHooks = []FixedDeductionDetailHook{}

	AddFixedDeductionDetailHook(boil.BeforeDeleteHook, fixedDeductionDetailBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	fixedDeductionDetailBeforeDeleteHooks = []FixedDeductionDetailHook{}

	AddFixedDeductionDetailHook(boil.AfterDeleteHook, fixedDeductionDetailAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	fixedDeductionDetailAfterDeleteHooks = []FixedDeductionDetailHook{}

	AddFixedDeductionDetailHook(boil.BeforeUpsertHook, fixedDeductionDetailBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	fixedDeductionDetailBeforeUpsertHooks = []FixedDeductionDetailHook{}

	AddFixedDeductionDetailHook(boil.AfterUpsertHook, fixedDeductionDetailAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	fixedDeductionDetailAfterUpsertHooks = []FixedDeductionDetailHook{}
}

func testFixedDeductionDetailsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FixedDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFixedDeductionDetailsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(fixedDeductionDetailColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FixedDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFixedDeductionDetailToOneFixedDeductionUsingFixedDeduction(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FixedDeductionDetail
	var foreign FixedDeduction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, fixedDeductionDetailDBTypes, false, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, fixedDeductionDBTypes, false, fixedDeductionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeduction struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FixedDeductionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FixedDeduction().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddFixedDeductionHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *FixedDeduction) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := FixedDeductionDetailSlice{&local}
	if err = local.L.LoadFixedDeduction(ctx, tx, false, (*[]*FixedDeductionDetail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FixedDeduction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FixedDeduction = nil
	if err = local.L.LoadFixedDeduction(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FixedDeduction == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testFixedDeductionDetailToOneSetOpFixedDeductionUsingFixedDeduction(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FixedDeductionDetail
	var b, c FixedDeduction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fixedDeductionDetailDBTypes, false, strmangle.SetComplement(fixedDeductionDetailPrimaryKeyColumns, fixedDeductionDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, fixedDeductionDBTypes, false, strmangle.SetComplement(fixedDeductionPrimaryKeyColumns, fixedDeductionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, fixedDeductionDBTypes, false, strmangle.SetComplement(fixedDeductionPrimaryKeyColumns, fixedDeductionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*FixedDeduction{&b, &c} {
		err = a.SetFixedDeduction(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FixedDeduction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FixedDeductionDetails[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FixedDeductionID != x.ID {
			t.Error("foreign key was wrong value", a.FixedDeductionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FixedDeductionID))
		reflect.Indirect(reflect.ValueOf(&a.FixedDeductionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FixedDeductionID != x.ID {
			t.Error("foreign key was wrong value", a.FixedDeductionID, x.ID)
		}
	}
}

func testFixedDeductionDetailsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFixedDeductionDetailsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FixedDeductionDetailSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFixedDeductionDetailsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FixedDeductionDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	fixedDeductionDetailDBTypes = map[string]string{`ID`: `mediumint`, `FixedDeductionID`: `mediumint`, `Nominal`: `varchar`, `Amount`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                           = bytes.MinRead
)

func testFixedDeductionDetailsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(fixedDeductionDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(fixedDeductionDetailAllColumns) == len(fixedDeductionDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FixedDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true, fixedDeductionDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFixedDeductionDetailsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(fixedDeductionDetailAllColumns) == len(fixedDeductionDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FixedDeductionDetail{}
	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true, fixedDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FixedDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fixedDeductionDetailDBTypes, true, fixedDeductionDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(fixedDeductionDetailAllColumns, fixedDeductionDetailPrimaryKeyColumns) {
		fields = fixedDeductionDetailAllColumns
	} else {
		fields = strmangle.SetComplement(
			fixedDeductionDetailAllColumns,
			fixedDeductionDetailPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FixedDeductionDetailSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFixedDeductionDetailsUpsert(t *testing.T) {
	t.Parallel()

	if len(fixedDeductionDetailAllColumns) == len(fixedDeductionDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLFixedDeductionDetailUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FixedDeductionDetail{}
	if err = randomize.Struct(seed, &o, fixedDeductionDetailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FixedDeductionDetail: %s", err)
	}

	count, err := FixedDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, fixedDeductionDetailDBTypes, false, fixedDeductionDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FixedDeductionDetail struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FixedDeductionDetail: %s", err)
	}

	count, err = FixedDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
