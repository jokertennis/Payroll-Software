// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAdministrators(t *testing.T) {
	t.Parallel()

	query := Administrators()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAdministratorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Administrator{}
	if err = randomize.Struct(seed, o, administratorDBTypes, true, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Administrators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdministratorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Administrator{}
	if err = randomize.Struct(seed, o, administratorDBTypes, true, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Administrators().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Administrators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdministratorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Administrator{}
	if err = randomize.Struct(seed, o, administratorDBTypes, true, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AdministratorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Administrators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdministratorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Administrator{}
	if err = randomize.Struct(seed, o, administratorDBTypes, true, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AdministratorExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Administrator exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AdministratorExists to return true, but got false.")
	}
}

func testAdministratorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Administrator{}
	if err = randomize.Struct(seed, o, administratorDBTypes, true, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	administratorFound, err := FindAdministrator(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if administratorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAdministratorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Administrator{}
	if err = randomize.Struct(seed, o, administratorDBTypes, true, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Administrators().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAdministratorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Administrator{}
	if err = randomize.Struct(seed, o, administratorDBTypes, true, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Administrators().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAdministratorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	administratorOne := &Administrator{}
	administratorTwo := &Administrator{}
	if err = randomize.Struct(seed, administratorOne, administratorDBTypes, false, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}
	if err = randomize.Struct(seed, administratorTwo, administratorDBTypes, false, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = administratorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = administratorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Administrators().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAdministratorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	administratorOne := &Administrator{}
	administratorTwo := &Administrator{}
	if err = randomize.Struct(seed, administratorOne, administratorDBTypes, false, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}
	if err = randomize.Struct(seed, administratorTwo, administratorDBTypes, false, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = administratorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = administratorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Administrators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func administratorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Administrator) error {
	*o = Administrator{}
	return nil
}

func administratorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Administrator) error {
	*o = Administrator{}
	return nil
}

func administratorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Administrator) error {
	*o = Administrator{}
	return nil
}

func administratorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Administrator) error {
	*o = Administrator{}
	return nil
}

func administratorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Administrator) error {
	*o = Administrator{}
	return nil
}

func administratorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Administrator) error {
	*o = Administrator{}
	return nil
}

func administratorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Administrator) error {
	*o = Administrator{}
	return nil
}

func administratorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Administrator) error {
	*o = Administrator{}
	return nil
}

func administratorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Administrator) error {
	*o = Administrator{}
	return nil
}

func testAdministratorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Administrator{}
	o := &Administrator{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, administratorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Administrator object: %s", err)
	}

	AddAdministratorHook(boil.BeforeInsertHook, administratorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	administratorBeforeInsertHooks = []AdministratorHook{}

	AddAdministratorHook(boil.AfterInsertHook, administratorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	administratorAfterInsertHooks = []AdministratorHook{}

	AddAdministratorHook(boil.AfterSelectHook, administratorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	administratorAfterSelectHooks = []AdministratorHook{}

	AddAdministratorHook(boil.BeforeUpdateHook, administratorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	administratorBeforeUpdateHooks = []AdministratorHook{}

	AddAdministratorHook(boil.AfterUpdateHook, administratorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	administratorAfterUpdateHooks = []AdministratorHook{}

	AddAdministratorHook(boil.BeforeDeleteHook, administratorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	administratorBeforeDeleteHooks = []AdministratorHook{}

	AddAdministratorHook(boil.AfterDeleteHook, administratorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	administratorAfterDeleteHooks = []AdministratorHook{}

	AddAdministratorHook(boil.BeforeUpsertHook, administratorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	administratorBeforeUpsertHooks = []AdministratorHook{}

	AddAdministratorHook(boil.AfterUpsertHook, administratorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	administratorAfterUpsertHooks = []AdministratorHook{}
}

func testAdministratorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Administrator{}
	if err = randomize.Struct(seed, o, administratorDBTypes, true, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Administrators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdministratorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Administrator{}
	if err = randomize.Struct(seed, o, administratorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(administratorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Administrators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdministratorToOneCompanyUsingCompany(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Administrator
	var foreign Company

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, administratorDBTypes, false, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CompanyID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Company().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCompanyHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Company) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AdministratorSlice{&local}
	if err = local.L.LoadCompany(ctx, tx, false, (*[]*Administrator)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Company == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Company = nil
	if err = local.L.LoadCompany(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Company == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAdministratorToOneSetOpCompanyUsingCompany(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Administrator
	var b, c Company

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, administratorDBTypes, false, strmangle.SetComplement(administratorPrimaryKeyColumns, administratorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Company{&b, &c} {
		err = a.SetCompany(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Company != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Administrators[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CompanyID != x.ID {
			t.Error("foreign key was wrong value", a.CompanyID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CompanyID))
		reflect.Indirect(reflect.ValueOf(&a.CompanyID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CompanyID != x.ID {
			t.Error("foreign key was wrong value", a.CompanyID, x.ID)
		}
	}
}

func testAdministratorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Administrator{}
	if err = randomize.Struct(seed, o, administratorDBTypes, true, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAdministratorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Administrator{}
	if err = randomize.Struct(seed, o, administratorDBTypes, true, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AdministratorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAdministratorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Administrator{}
	if err = randomize.Struct(seed, o, administratorDBTypes, true, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Administrators().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	administratorDBTypes = map[string]string{`ID`: `mediumint`, `CompanyID`: `smallint`, `Name`: `varchar`, `MailAddress`: `varchar`, `Password`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                    = bytes.MinRead
)

func testAdministratorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(administratorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(administratorAllColumns) == len(administratorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Administrator{}
	if err = randomize.Struct(seed, o, administratorDBTypes, true, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Administrators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, administratorDBTypes, true, administratorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAdministratorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(administratorAllColumns) == len(administratorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Administrator{}
	if err = randomize.Struct(seed, o, administratorDBTypes, true, administratorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Administrators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, administratorDBTypes, true, administratorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(administratorAllColumns, administratorPrimaryKeyColumns) {
		fields = administratorAllColumns
	} else {
		fields = strmangle.SetComplement(
			administratorAllColumns,
			administratorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AdministratorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAdministratorsUpsert(t *testing.T) {
	t.Parallel()

	if len(administratorAllColumns) == len(administratorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAdministratorUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Administrator{}
	if err = randomize.Struct(seed, &o, administratorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Administrator: %s", err)
	}

	count, err := Administrators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, administratorDBTypes, false, administratorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Administrator struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Administrator: %s", err)
	}

	count, err = Administrators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
