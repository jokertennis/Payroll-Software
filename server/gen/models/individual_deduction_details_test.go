// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIndividualDeductionDetails(t *testing.T) {
	t.Parallel()

	query := IndividualDeductionDetails()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIndividualDeductionDetailsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IndividualDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIndividualDeductionDetailsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := IndividualDeductionDetails().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IndividualDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIndividualDeductionDetailsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IndividualDeductionDetailSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IndividualDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIndividualDeductionDetailsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IndividualDeductionDetailExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if IndividualDeductionDetail exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IndividualDeductionDetailExists to return true, but got false.")
	}
}

func testIndividualDeductionDetailsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	individualDeductionDetailFound, err := FindIndividualDeductionDetail(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if individualDeductionDetailFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIndividualDeductionDetailsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = IndividualDeductionDetails().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIndividualDeductionDetailsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := IndividualDeductionDetails().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIndividualDeductionDetailsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	individualDeductionDetailOne := &IndividualDeductionDetail{}
	individualDeductionDetailTwo := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, individualDeductionDetailOne, individualDeductionDetailDBTypes, false, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, individualDeductionDetailTwo, individualDeductionDetailDBTypes, false, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = individualDeductionDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = individualDeductionDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IndividualDeductionDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIndividualDeductionDetailsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	individualDeductionDetailOne := &IndividualDeductionDetail{}
	individualDeductionDetailTwo := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, individualDeductionDetailOne, individualDeductionDetailDBTypes, false, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, individualDeductionDetailTwo, individualDeductionDetailDBTypes, false, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = individualDeductionDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = individualDeductionDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IndividualDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func individualDeductionDetailBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *IndividualDeductionDetail) error {
	*o = IndividualDeductionDetail{}
	return nil
}

func individualDeductionDetailAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *IndividualDeductionDetail) error {
	*o = IndividualDeductionDetail{}
	return nil
}

func individualDeductionDetailAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *IndividualDeductionDetail) error {
	*o = IndividualDeductionDetail{}
	return nil
}

func individualDeductionDetailBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IndividualDeductionDetail) error {
	*o = IndividualDeductionDetail{}
	return nil
}

func individualDeductionDetailAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IndividualDeductionDetail) error {
	*o = IndividualDeductionDetail{}
	return nil
}

func individualDeductionDetailBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IndividualDeductionDetail) error {
	*o = IndividualDeductionDetail{}
	return nil
}

func individualDeductionDetailAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IndividualDeductionDetail) error {
	*o = IndividualDeductionDetail{}
	return nil
}

func individualDeductionDetailBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IndividualDeductionDetail) error {
	*o = IndividualDeductionDetail{}
	return nil
}

func individualDeductionDetailAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IndividualDeductionDetail) error {
	*o = IndividualDeductionDetail{}
	return nil
}

func testIndividualDeductionDetailsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &IndividualDeductionDetail{}
	o := &IndividualDeductionDetail{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail object: %s", err)
	}

	AddIndividualDeductionDetailHook(boil.BeforeInsertHook, individualDeductionDetailBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	individualDeductionDetailBeforeInsertHooks = []IndividualDeductionDetailHook{}

	AddIndividualDeductionDetailHook(boil.AfterInsertHook, individualDeductionDetailAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	individualDeductionDetailAfterInsertHooks = []IndividualDeductionDetailHook{}

	AddIndividualDeductionDetailHook(boil.AfterSelectHook, individualDeductionDetailAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	individualDeductionDetailAfterSelectHooks = []IndividualDeductionDetailHook{}

	AddIndividualDeductionDetailHook(boil.BeforeUpdateHook, individualDeductionDetailBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	individualDeductionDetailBeforeUpdateHooks = []IndividualDeductionDetailHook{}

	AddIndividualDeductionDetailHook(boil.AfterUpdateHook, individualDeductionDetailAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	individualDeductionDetailAfterUpdateHooks = []IndividualDeductionDetailHook{}

	AddIndividualDeductionDetailHook(boil.BeforeDeleteHook, individualDeductionDetailBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	individualDeductionDetailBeforeDeleteHooks = []IndividualDeductionDetailHook{}

	AddIndividualDeductionDetailHook(boil.AfterDeleteHook, individualDeductionDetailAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	individualDeductionDetailAfterDeleteHooks = []IndividualDeductionDetailHook{}

	AddIndividualDeductionDetailHook(boil.BeforeUpsertHook, individualDeductionDetailBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	individualDeductionDetailBeforeUpsertHooks = []IndividualDeductionDetailHook{}

	AddIndividualDeductionDetailHook(boil.AfterUpsertHook, individualDeductionDetailAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	individualDeductionDetailAfterUpsertHooks = []IndividualDeductionDetailHook{}
}

func testIndividualDeductionDetailsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IndividualDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIndividualDeductionDetailsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(individualDeductionDetailColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := IndividualDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIndividualDeductionDetailToOneIndividualDeductionUsingIndividualDeduction(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local IndividualDeductionDetail
	var foreign IndividualDeduction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, individualDeductionDetailDBTypes, false, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, individualDeductionDBTypes, false, individualDeductionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeduction struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IndividualDeductionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IndividualDeduction().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddIndividualDeductionHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *IndividualDeduction) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := IndividualDeductionDetailSlice{&local}
	if err = local.L.LoadIndividualDeduction(ctx, tx, false, (*[]*IndividualDeductionDetail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IndividualDeduction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IndividualDeduction = nil
	if err = local.L.LoadIndividualDeduction(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IndividualDeduction == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testIndividualDeductionDetailToOneSetOpIndividualDeductionUsingIndividualDeduction(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IndividualDeductionDetail
	var b, c IndividualDeduction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, individualDeductionDetailDBTypes, false, strmangle.SetComplement(individualDeductionDetailPrimaryKeyColumns, individualDeductionDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, individualDeductionDBTypes, false, strmangle.SetComplement(individualDeductionPrimaryKeyColumns, individualDeductionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, individualDeductionDBTypes, false, strmangle.SetComplement(individualDeductionPrimaryKeyColumns, individualDeductionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*IndividualDeduction{&b, &c} {
		err = a.SetIndividualDeduction(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IndividualDeduction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IndividualDeductionDetails[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IndividualDeductionID != x.ID {
			t.Error("foreign key was wrong value", a.IndividualDeductionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IndividualDeductionID))
		reflect.Indirect(reflect.ValueOf(&a.IndividualDeductionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IndividualDeductionID != x.ID {
			t.Error("foreign key was wrong value", a.IndividualDeductionID, x.ID)
		}
	}
}

func testIndividualDeductionDetailsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIndividualDeductionDetailsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IndividualDeductionDetailSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIndividualDeductionDetailsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IndividualDeductionDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	individualDeductionDetailDBTypes = map[string]string{`ID`: `mediumint`, `IndividualDeductionID`: `mediumint`, `Nominal`: `varchar`, `Amount`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                                = bytes.MinRead
)

func testIndividualDeductionDetailsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(individualDeductionDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(individualDeductionDetailAllColumns) == len(individualDeductionDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IndividualDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true, individualDeductionDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIndividualDeductionDetailsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(individualDeductionDetailAllColumns) == len(individualDeductionDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IndividualDeductionDetail{}
	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true, individualDeductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IndividualDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, individualDeductionDetailDBTypes, true, individualDeductionDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(individualDeductionDetailAllColumns, individualDeductionDetailPrimaryKeyColumns) {
		fields = individualDeductionDetailAllColumns
	} else {
		fields = strmangle.SetComplement(
			individualDeductionDetailAllColumns,
			individualDeductionDetailPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IndividualDeductionDetailSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIndividualDeductionDetailsUpsert(t *testing.T) {
	t.Parallel()

	if len(individualDeductionDetailAllColumns) == len(individualDeductionDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLIndividualDeductionDetailUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := IndividualDeductionDetail{}
	if err = randomize.Struct(seed, &o, individualDeductionDetailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IndividualDeductionDetail: %s", err)
	}

	count, err := IndividualDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, individualDeductionDetailDBTypes, false, individualDeductionDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IndividualDeductionDetail struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IndividualDeductionDetail: %s", err)
	}

	count, err = IndividualDeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
