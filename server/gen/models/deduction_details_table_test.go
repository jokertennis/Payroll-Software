// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDeductionDetailsTables(t *testing.T) {
	t.Parallel()

	query := DeductionDetailsTables()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDeductionDetailsTablesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeductionDetailsTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeductionDetailsTablesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DeductionDetailsTables().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeductionDetailsTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeductionDetailsTablesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeductionDetailsTableSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeductionDetailsTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeductionDetailsTablesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DeductionDetailsTableExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DeductionDetailsTable exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DeductionDetailsTableExists to return true, but got false.")
	}
}

func testDeductionDetailsTablesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	deductionDetailsTableFound, err := FindDeductionDetailsTable(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if deductionDetailsTableFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDeductionDetailsTablesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DeductionDetailsTables().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDeductionDetailsTablesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DeductionDetailsTables().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDeductionDetailsTablesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	deductionDetailsTableOne := &DeductionDetailsTable{}
	deductionDetailsTableTwo := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, deductionDetailsTableOne, deductionDetailsTableDBTypes, false, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}
	if err = randomize.Struct(seed, deductionDetailsTableTwo, deductionDetailsTableDBTypes, false, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deductionDetailsTableOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deductionDetailsTableTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeductionDetailsTables().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDeductionDetailsTablesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	deductionDetailsTableOne := &DeductionDetailsTable{}
	deductionDetailsTableTwo := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, deductionDetailsTableOne, deductionDetailsTableDBTypes, false, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}
	if err = randomize.Struct(seed, deductionDetailsTableTwo, deductionDetailsTableDBTypes, false, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deductionDetailsTableOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deductionDetailsTableTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeductionDetailsTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func deductionDetailsTableBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetailsTable) error {
	*o = DeductionDetailsTable{}
	return nil
}

func deductionDetailsTableAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetailsTable) error {
	*o = DeductionDetailsTable{}
	return nil
}

func deductionDetailsTableAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetailsTable) error {
	*o = DeductionDetailsTable{}
	return nil
}

func deductionDetailsTableBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetailsTable) error {
	*o = DeductionDetailsTable{}
	return nil
}

func deductionDetailsTableAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetailsTable) error {
	*o = DeductionDetailsTable{}
	return nil
}

func deductionDetailsTableBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetailsTable) error {
	*o = DeductionDetailsTable{}
	return nil
}

func deductionDetailsTableAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetailsTable) error {
	*o = DeductionDetailsTable{}
	return nil
}

func deductionDetailsTableBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetailsTable) error {
	*o = DeductionDetailsTable{}
	return nil
}

func deductionDetailsTableAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetailsTable) error {
	*o = DeductionDetailsTable{}
	return nil
}

func testDeductionDetailsTablesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DeductionDetailsTable{}
	o := &DeductionDetailsTable{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable object: %s", err)
	}

	AddDeductionDetailsTableHook(boil.BeforeInsertHook, deductionDetailsTableBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	deductionDetailsTableBeforeInsertHooks = []DeductionDetailsTableHook{}

	AddDeductionDetailsTableHook(boil.AfterInsertHook, deductionDetailsTableAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	deductionDetailsTableAfterInsertHooks = []DeductionDetailsTableHook{}

	AddDeductionDetailsTableHook(boil.AfterSelectHook, deductionDetailsTableAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	deductionDetailsTableAfterSelectHooks = []DeductionDetailsTableHook{}

	AddDeductionDetailsTableHook(boil.BeforeUpdateHook, deductionDetailsTableBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	deductionDetailsTableBeforeUpdateHooks = []DeductionDetailsTableHook{}

	AddDeductionDetailsTableHook(boil.AfterUpdateHook, deductionDetailsTableAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	deductionDetailsTableAfterUpdateHooks = []DeductionDetailsTableHook{}

	AddDeductionDetailsTableHook(boil.BeforeDeleteHook, deductionDetailsTableBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	deductionDetailsTableBeforeDeleteHooks = []DeductionDetailsTableHook{}

	AddDeductionDetailsTableHook(boil.AfterDeleteHook, deductionDetailsTableAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	deductionDetailsTableAfterDeleteHooks = []DeductionDetailsTableHook{}

	AddDeductionDetailsTableHook(boil.BeforeUpsertHook, deductionDetailsTableBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	deductionDetailsTableBeforeUpsertHooks = []DeductionDetailsTableHook{}

	AddDeductionDetailsTableHook(boil.AfterUpsertHook, deductionDetailsTableAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	deductionDetailsTableAfterUpsertHooks = []DeductionDetailsTableHook{}
}

func testDeductionDetailsTablesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeductionDetailsTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeductionDetailsTablesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(deductionDetailsTableColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DeductionDetailsTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeductionDetailsTableToOneDeductionUsingDeduction(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DeductionDetailsTable
	var foreign Deduction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, deductionDetailsTableDBTypes, false, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, deductionDBTypes, false, deductionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Deduction struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DeductionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Deduction().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddDeductionHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Deduction) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DeductionDetailsTableSlice{&local}
	if err = local.L.LoadDeduction(ctx, tx, false, (*[]*DeductionDetailsTable)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Deduction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Deduction = nil
	if err = local.L.LoadDeduction(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Deduction == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDeductionDetailsTableToOneSetOpDeductionUsingDeduction(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DeductionDetailsTable
	var b, c Deduction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deductionDetailsTableDBTypes, false, strmangle.SetComplement(deductionDetailsTablePrimaryKeyColumns, deductionDetailsTableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, deductionDBTypes, false, strmangle.SetComplement(deductionPrimaryKeyColumns, deductionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, deductionDBTypes, false, strmangle.SetComplement(deductionPrimaryKeyColumns, deductionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Deduction{&b, &c} {
		err = a.SetDeduction(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Deduction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DeductionDetailsTables[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DeductionID != x.ID {
			t.Error("foreign key was wrong value", a.DeductionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DeductionID))
		reflect.Indirect(reflect.ValueOf(&a.DeductionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DeductionID != x.ID {
			t.Error("foreign key was wrong value", a.DeductionID, x.ID)
		}
	}
}

func testDeductionDetailsTablesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeductionDetailsTablesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeductionDetailsTableSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeductionDetailsTablesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeductionDetailsTables().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	deductionDetailsTableDBTypes = map[string]string{`ID`: `mediumint`, `DeductionID`: `mediumint`, `Nominal`: `varchar`, `Amount`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                            = bytes.MinRead
)

func testDeductionDetailsTablesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(deductionDetailsTablePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(deductionDetailsTableAllColumns) == len(deductionDetailsTablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeductionDetailsTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true, deductionDetailsTablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDeductionDetailsTablesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(deductionDetailsTableAllColumns) == len(deductionDetailsTablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetailsTable{}
	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true, deductionDetailsTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeductionDetailsTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deductionDetailsTableDBTypes, true, deductionDetailsTablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(deductionDetailsTableAllColumns, deductionDetailsTablePrimaryKeyColumns) {
		fields = deductionDetailsTableAllColumns
	} else {
		fields = strmangle.SetComplement(
			deductionDetailsTableAllColumns,
			deductionDetailsTablePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DeductionDetailsTableSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDeductionDetailsTablesUpsert(t *testing.T) {
	t.Parallel()

	if len(deductionDetailsTableAllColumns) == len(deductionDetailsTablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDeductionDetailsTableUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DeductionDetailsTable{}
	if err = randomize.Struct(seed, &o, deductionDetailsTableDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeductionDetailsTable: %s", err)
	}

	count, err := DeductionDetailsTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, deductionDetailsTableDBTypes, false, deductionDetailsTablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeductionDetailsTable struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeductionDetailsTable: %s", err)
	}

	count, err = DeductionDetailsTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
