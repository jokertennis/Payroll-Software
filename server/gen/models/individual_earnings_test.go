// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIndividualEarnings(t *testing.T) {
	t.Parallel()

	query := IndividualEarnings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIndividualEarningsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualEarning{}
	if err = randomize.Struct(seed, o, individualEarningDBTypes, true, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IndividualEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIndividualEarningsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualEarning{}
	if err = randomize.Struct(seed, o, individualEarningDBTypes, true, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := IndividualEarnings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IndividualEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIndividualEarningsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualEarning{}
	if err = randomize.Struct(seed, o, individualEarningDBTypes, true, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IndividualEarningSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IndividualEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIndividualEarningsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualEarning{}
	if err = randomize.Struct(seed, o, individualEarningDBTypes, true, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IndividualEarningExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if IndividualEarning exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IndividualEarningExists to return true, but got false.")
	}
}

func testIndividualEarningsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualEarning{}
	if err = randomize.Struct(seed, o, individualEarningDBTypes, true, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	individualEarningFound, err := FindIndividualEarning(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if individualEarningFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIndividualEarningsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualEarning{}
	if err = randomize.Struct(seed, o, individualEarningDBTypes, true, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = IndividualEarnings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIndividualEarningsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualEarning{}
	if err = randomize.Struct(seed, o, individualEarningDBTypes, true, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := IndividualEarnings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIndividualEarningsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	individualEarningOne := &IndividualEarning{}
	individualEarningTwo := &IndividualEarning{}
	if err = randomize.Struct(seed, individualEarningOne, individualEarningDBTypes, false, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}
	if err = randomize.Struct(seed, individualEarningTwo, individualEarningDBTypes, false, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = individualEarningOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = individualEarningTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IndividualEarnings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIndividualEarningsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	individualEarningOne := &IndividualEarning{}
	individualEarningTwo := &IndividualEarning{}
	if err = randomize.Struct(seed, individualEarningOne, individualEarningDBTypes, false, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}
	if err = randomize.Struct(seed, individualEarningTwo, individualEarningDBTypes, false, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = individualEarningOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = individualEarningTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IndividualEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func individualEarningBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *IndividualEarning) error {
	*o = IndividualEarning{}
	return nil
}

func individualEarningAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *IndividualEarning) error {
	*o = IndividualEarning{}
	return nil
}

func individualEarningAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *IndividualEarning) error {
	*o = IndividualEarning{}
	return nil
}

func individualEarningBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IndividualEarning) error {
	*o = IndividualEarning{}
	return nil
}

func individualEarningAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IndividualEarning) error {
	*o = IndividualEarning{}
	return nil
}

func individualEarningBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IndividualEarning) error {
	*o = IndividualEarning{}
	return nil
}

func individualEarningAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IndividualEarning) error {
	*o = IndividualEarning{}
	return nil
}

func individualEarningBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IndividualEarning) error {
	*o = IndividualEarning{}
	return nil
}

func individualEarningAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IndividualEarning) error {
	*o = IndividualEarning{}
	return nil
}

func testIndividualEarningsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &IndividualEarning{}
	o := &IndividualEarning{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, individualEarningDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IndividualEarning object: %s", err)
	}

	AddIndividualEarningHook(boil.BeforeInsertHook, individualEarningBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	individualEarningBeforeInsertHooks = []IndividualEarningHook{}

	AddIndividualEarningHook(boil.AfterInsertHook, individualEarningAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	individualEarningAfterInsertHooks = []IndividualEarningHook{}

	AddIndividualEarningHook(boil.AfterSelectHook, individualEarningAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	individualEarningAfterSelectHooks = []IndividualEarningHook{}

	AddIndividualEarningHook(boil.BeforeUpdateHook, individualEarningBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	individualEarningBeforeUpdateHooks = []IndividualEarningHook{}

	AddIndividualEarningHook(boil.AfterUpdateHook, individualEarningAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	individualEarningAfterUpdateHooks = []IndividualEarningHook{}

	AddIndividualEarningHook(boil.BeforeDeleteHook, individualEarningBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	individualEarningBeforeDeleteHooks = []IndividualEarningHook{}

	AddIndividualEarningHook(boil.AfterDeleteHook, individualEarningAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	individualEarningAfterDeleteHooks = []IndividualEarningHook{}

	AddIndividualEarningHook(boil.BeforeUpsertHook, individualEarningBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	individualEarningBeforeUpsertHooks = []IndividualEarningHook{}

	AddIndividualEarningHook(boil.AfterUpsertHook, individualEarningAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	individualEarningAfterUpsertHooks = []IndividualEarningHook{}
}

func testIndividualEarningsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualEarning{}
	if err = randomize.Struct(seed, o, individualEarningDBTypes, true, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IndividualEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIndividualEarningsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualEarning{}
	if err = randomize.Struct(seed, o, individualEarningDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(individualEarningColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := IndividualEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIndividualEarningOneToOneSalaryStatementUsingSalaryStatement(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign SalaryStatement
	var local IndividualEarning

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, individualEarningDBTypes, true, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.IndividualEarningID, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SalaryStatement().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.IndividualEarningID, foreign.IndividualEarningID) {
		t.Errorf("want: %v, got %v", foreign.IndividualEarningID, check.IndividualEarningID)
	}

	ranAfterSelectHook := false
	AddSalaryStatementHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *SalaryStatement) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := IndividualEarningSlice{&local}
	if err = local.L.LoadSalaryStatement(ctx, tx, false, (*[]*IndividualEarning)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SalaryStatement == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SalaryStatement = nil
	if err = local.L.LoadSalaryStatement(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SalaryStatement == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testIndividualEarningOneToOneSetOpSalaryStatementUsingSalaryStatement(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IndividualEarning
	var b, c SalaryStatement

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, individualEarningDBTypes, false, strmangle.SetComplement(individualEarningPrimaryKeyColumns, individualEarningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SalaryStatement{&b, &c} {
		err = a.SetSalaryStatement(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SalaryStatement != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.IndividualEarning != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.IndividualEarningID) {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.IndividualEarningID))
		reflect.Indirect(reflect.ValueOf(&x.IndividualEarningID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ID, x.IndividualEarningID) {
			t.Error("foreign key was wrong value", a.ID, x.IndividualEarningID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testIndividualEarningOneToOneRemoveOpSalaryStatementUsingSalaryStatement(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IndividualEarning
	var b SalaryStatement

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, individualEarningDBTypes, false, strmangle.SetComplement(individualEarningPrimaryKeyColumns, individualEarningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSalaryStatement(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSalaryStatement(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SalaryStatement().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SalaryStatement != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(b.IndividualEarningID) {
		t.Error("foreign key column should be nil")
	}

	if b.R.IndividualEarning != nil {
		t.Error("failed to remove a from b's relationships")
	}
}

func testIndividualEarningToManyIndividualEarningDetails(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IndividualEarning
	var b, c IndividualEarningDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, individualEarningDBTypes, true, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, individualEarningDetailDBTypes, false, individualEarningDetailColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, individualEarningDetailDBTypes, false, individualEarningDetailColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.IndividualEarningID = a.ID
	c.IndividualEarningID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IndividualEarningDetails().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.IndividualEarningID == b.IndividualEarningID {
			bFound = true
		}
		if v.IndividualEarningID == c.IndividualEarningID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := IndividualEarningSlice{&a}
	if err = a.L.LoadIndividualEarningDetails(ctx, tx, false, (*[]*IndividualEarning)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IndividualEarningDetails); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IndividualEarningDetails = nil
	if err = a.L.LoadIndividualEarningDetails(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IndividualEarningDetails); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testIndividualEarningToManyAddOpIndividualEarningDetails(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IndividualEarning
	var b, c, d, e IndividualEarningDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, individualEarningDBTypes, false, strmangle.SetComplement(individualEarningPrimaryKeyColumns, individualEarningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IndividualEarningDetail{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, individualEarningDetailDBTypes, false, strmangle.SetComplement(individualEarningDetailPrimaryKeyColumns, individualEarningDetailColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*IndividualEarningDetail{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIndividualEarningDetails(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.IndividualEarningID {
			t.Error("foreign key was wrong value", a.ID, first.IndividualEarningID)
		}
		if a.ID != second.IndividualEarningID {
			t.Error("foreign key was wrong value", a.ID, second.IndividualEarningID)
		}

		if first.R.IndividualEarning != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IndividualEarning != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IndividualEarningDetails[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IndividualEarningDetails[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IndividualEarningDetails().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testIndividualEarningsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualEarning{}
	if err = randomize.Struct(seed, o, individualEarningDBTypes, true, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIndividualEarningsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualEarning{}
	if err = randomize.Struct(seed, o, individualEarningDBTypes, true, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IndividualEarningSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIndividualEarningsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IndividualEarning{}
	if err = randomize.Struct(seed, o, individualEarningDBTypes, true, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IndividualEarnings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	individualEarningDBTypes = map[string]string{`ID`: `mediumint`, `Nominal`: `varchar`, `Amount`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                        = bytes.MinRead
)

func testIndividualEarningsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(individualEarningPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(individualEarningAllColumns) == len(individualEarningPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IndividualEarning{}
	if err = randomize.Struct(seed, o, individualEarningDBTypes, true, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IndividualEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, individualEarningDBTypes, true, individualEarningPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIndividualEarningsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(individualEarningAllColumns) == len(individualEarningPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IndividualEarning{}
	if err = randomize.Struct(seed, o, individualEarningDBTypes, true, individualEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IndividualEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, individualEarningDBTypes, true, individualEarningPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(individualEarningAllColumns, individualEarningPrimaryKeyColumns) {
		fields = individualEarningAllColumns
	} else {
		fields = strmangle.SetComplement(
			individualEarningAllColumns,
			individualEarningPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IndividualEarningSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIndividualEarningsUpsert(t *testing.T) {
	t.Parallel()

	if len(individualEarningAllColumns) == len(individualEarningPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLIndividualEarningUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := IndividualEarning{}
	if err = randomize.Struct(seed, &o, individualEarningDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IndividualEarning: %s", err)
	}

	count, err := IndividualEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, individualEarningDBTypes, false, individualEarningPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IndividualEarning struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IndividualEarning: %s", err)
	}

	count, err = IndividualEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
