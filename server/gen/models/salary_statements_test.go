// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSalaryStatements(t *testing.T) {
	t.Parallel()

	query := SalaryStatements()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSalaryStatementsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SalaryStatement{}
	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SalaryStatements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSalaryStatementsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SalaryStatement{}
	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SalaryStatements().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SalaryStatements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSalaryStatementsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SalaryStatement{}
	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SalaryStatementSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SalaryStatements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSalaryStatementsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SalaryStatement{}
	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SalaryStatementExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SalaryStatement exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SalaryStatementExists to return true, but got false.")
	}
}

func testSalaryStatementsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SalaryStatement{}
	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	salaryStatementFound, err := FindSalaryStatement(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if salaryStatementFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSalaryStatementsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SalaryStatement{}
	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SalaryStatements().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSalaryStatementsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SalaryStatement{}
	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SalaryStatements().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSalaryStatementsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	salaryStatementOne := &SalaryStatement{}
	salaryStatementTwo := &SalaryStatement{}
	if err = randomize.Struct(seed, salaryStatementOne, salaryStatementDBTypes, false, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}
	if err = randomize.Struct(seed, salaryStatementTwo, salaryStatementDBTypes, false, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = salaryStatementOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = salaryStatementTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SalaryStatements().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSalaryStatementsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	salaryStatementOne := &SalaryStatement{}
	salaryStatementTwo := &SalaryStatement{}
	if err = randomize.Struct(seed, salaryStatementOne, salaryStatementDBTypes, false, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}
	if err = randomize.Struct(seed, salaryStatementTwo, salaryStatementDBTypes, false, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = salaryStatementOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = salaryStatementTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SalaryStatements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func salaryStatementBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SalaryStatement) error {
	*o = SalaryStatement{}
	return nil
}

func salaryStatementAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SalaryStatement) error {
	*o = SalaryStatement{}
	return nil
}

func salaryStatementAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SalaryStatement) error {
	*o = SalaryStatement{}
	return nil
}

func salaryStatementBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SalaryStatement) error {
	*o = SalaryStatement{}
	return nil
}

func salaryStatementAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SalaryStatement) error {
	*o = SalaryStatement{}
	return nil
}

func salaryStatementBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SalaryStatement) error {
	*o = SalaryStatement{}
	return nil
}

func salaryStatementAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SalaryStatement) error {
	*o = SalaryStatement{}
	return nil
}

func salaryStatementBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SalaryStatement) error {
	*o = SalaryStatement{}
	return nil
}

func salaryStatementAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SalaryStatement) error {
	*o = SalaryStatement{}
	return nil
}

func testSalaryStatementsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SalaryStatement{}
	o := &SalaryStatement{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, salaryStatementDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SalaryStatement object: %s", err)
	}

	AddSalaryStatementHook(boil.BeforeInsertHook, salaryStatementBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	salaryStatementBeforeInsertHooks = []SalaryStatementHook{}

	AddSalaryStatementHook(boil.AfterInsertHook, salaryStatementAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	salaryStatementAfterInsertHooks = []SalaryStatementHook{}

	AddSalaryStatementHook(boil.AfterSelectHook, salaryStatementAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	salaryStatementAfterSelectHooks = []SalaryStatementHook{}

	AddSalaryStatementHook(boil.BeforeUpdateHook, salaryStatementBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	salaryStatementBeforeUpdateHooks = []SalaryStatementHook{}

	AddSalaryStatementHook(boil.AfterUpdateHook, salaryStatementAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	salaryStatementAfterUpdateHooks = []SalaryStatementHook{}

	AddSalaryStatementHook(boil.BeforeDeleteHook, salaryStatementBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	salaryStatementBeforeDeleteHooks = []SalaryStatementHook{}

	AddSalaryStatementHook(boil.AfterDeleteHook, salaryStatementAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	salaryStatementAfterDeleteHooks = []SalaryStatementHook{}

	AddSalaryStatementHook(boil.BeforeUpsertHook, salaryStatementBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	salaryStatementBeforeUpsertHooks = []SalaryStatementHook{}

	AddSalaryStatementHook(boil.AfterUpsertHook, salaryStatementAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	salaryStatementAfterUpsertHooks = []SalaryStatementHook{}
}

func testSalaryStatementsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SalaryStatement{}
	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SalaryStatements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSalaryStatementsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SalaryStatement{}
	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(salaryStatementColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SalaryStatements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSalaryStatementToOneEarningUsingEarning(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SalaryStatement
	var foreign Earning

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, earningDBTypes, false, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.EarningID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Earning().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddEarningHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Earning) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SalaryStatementSlice{&local}
	if err = local.L.LoadEarning(ctx, tx, false, (*[]*SalaryStatement)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Earning == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Earning = nil
	if err = local.L.LoadEarning(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Earning == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSalaryStatementToOneFixedEarningUsingFixedEarning(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SalaryStatement
	var foreign FixedEarning

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, fixedEarningDBTypes, false, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.FixedEarningID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FixedEarning().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddFixedEarningHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *FixedEarning) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SalaryStatementSlice{&local}
	if err = local.L.LoadFixedEarning(ctx, tx, false, (*[]*SalaryStatement)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FixedEarning == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FixedEarning = nil
	if err = local.L.LoadFixedEarning(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FixedEarning == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSalaryStatementToOneDeductionUsingDeduction(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SalaryStatement
	var foreign Deduction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, deductionDBTypes, false, deductionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Deduction struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DeductionID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Deduction().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddDeductionHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Deduction) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SalaryStatementSlice{&local}
	if err = local.L.LoadDeduction(ctx, tx, false, (*[]*SalaryStatement)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Deduction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Deduction = nil
	if err = local.L.LoadDeduction(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Deduction == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSalaryStatementToOneFixedDeductionUsingFixedDeduction(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SalaryStatement
	var foreign FixedDeduction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, fixedDeductionDBTypes, false, fixedDeductionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedDeduction struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.FixedDeductionID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FixedDeduction().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddFixedDeductionHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *FixedDeduction) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SalaryStatementSlice{&local}
	if err = local.L.LoadFixedDeduction(ctx, tx, false, (*[]*SalaryStatement)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FixedDeduction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FixedDeduction = nil
	if err = local.L.LoadFixedDeduction(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FixedDeduction == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSalaryStatementToOneEmployeeUsingEmployee(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SalaryStatement
	var foreign Employee

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, salaryStatementDBTypes, false, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EmployeeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Employee().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddEmployeeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Employee) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SalaryStatementSlice{&local}
	if err = local.L.LoadEmployee(ctx, tx, false, (*[]*SalaryStatement)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Employee == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Employee = nil
	if err = local.L.LoadEmployee(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Employee == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSalaryStatementToOneSetOpEarningUsingEarning(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SalaryStatement
	var b, c Earning

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, earningDBTypes, false, strmangle.SetComplement(earningPrimaryKeyColumns, earningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, earningDBTypes, false, strmangle.SetComplement(earningPrimaryKeyColumns, earningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Earning{&b, &c} {
		err = a.SetEarning(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Earning != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SalaryStatement != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.EarningID, x.ID) {
			t.Error("foreign key was wrong value", a.EarningID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EarningID))
		reflect.Indirect(reflect.ValueOf(&a.EarningID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.EarningID, x.ID) {
			t.Error("foreign key was wrong value", a.EarningID, x.ID)
		}
	}
}

func testSalaryStatementToOneRemoveOpEarningUsingEarning(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SalaryStatement
	var b Earning

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, earningDBTypes, false, strmangle.SetComplement(earningPrimaryKeyColumns, earningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetEarning(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveEarning(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Earning().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Earning != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.EarningID) {
		t.Error("foreign key value should be nil")
	}

	if b.R.SalaryStatement != nil {
		t.Error("failed to remove a from b's relationships")
	}

}

func testSalaryStatementToOneSetOpFixedEarningUsingFixedEarning(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SalaryStatement
	var b, c FixedEarning

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, fixedEarningDBTypes, false, strmangle.SetComplement(fixedEarningPrimaryKeyColumns, fixedEarningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, fixedEarningDBTypes, false, strmangle.SetComplement(fixedEarningPrimaryKeyColumns, fixedEarningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*FixedEarning{&b, &c} {
		err = a.SetFixedEarning(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FixedEarning != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SalaryStatements[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.FixedEarningID, x.ID) {
			t.Error("foreign key was wrong value", a.FixedEarningID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FixedEarningID))
		reflect.Indirect(reflect.ValueOf(&a.FixedEarningID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.FixedEarningID, x.ID) {
			t.Error("foreign key was wrong value", a.FixedEarningID, x.ID)
		}
	}
}

func testSalaryStatementToOneRemoveOpFixedEarningUsingFixedEarning(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SalaryStatement
	var b FixedEarning

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, fixedEarningDBTypes, false, strmangle.SetComplement(fixedEarningPrimaryKeyColumns, fixedEarningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetFixedEarning(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveFixedEarning(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.FixedEarning().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.FixedEarning != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.FixedEarningID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SalaryStatements) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSalaryStatementToOneSetOpDeductionUsingDeduction(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SalaryStatement
	var b, c Deduction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, deductionDBTypes, false, strmangle.SetComplement(deductionPrimaryKeyColumns, deductionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, deductionDBTypes, false, strmangle.SetComplement(deductionPrimaryKeyColumns, deductionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Deduction{&b, &c} {
		err = a.SetDeduction(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Deduction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SalaryStatement != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DeductionID, x.ID) {
			t.Error("foreign key was wrong value", a.DeductionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DeductionID))
		reflect.Indirect(reflect.ValueOf(&a.DeductionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DeductionID, x.ID) {
			t.Error("foreign key was wrong value", a.DeductionID, x.ID)
		}
	}
}

func testSalaryStatementToOneRemoveOpDeductionUsingDeduction(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SalaryStatement
	var b Deduction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, deductionDBTypes, false, strmangle.SetComplement(deductionPrimaryKeyColumns, deductionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDeduction(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDeduction(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Deduction().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Deduction != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DeductionID) {
		t.Error("foreign key value should be nil")
	}

	if b.R.SalaryStatement != nil {
		t.Error("failed to remove a from b's relationships")
	}

}

func testSalaryStatementToOneSetOpFixedDeductionUsingFixedDeduction(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SalaryStatement
	var b, c FixedDeduction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, fixedDeductionDBTypes, false, strmangle.SetComplement(fixedDeductionPrimaryKeyColumns, fixedDeductionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, fixedDeductionDBTypes, false, strmangle.SetComplement(fixedDeductionPrimaryKeyColumns, fixedDeductionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*FixedDeduction{&b, &c} {
		err = a.SetFixedDeduction(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FixedDeduction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SalaryStatements[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.FixedDeductionID, x.ID) {
			t.Error("foreign key was wrong value", a.FixedDeductionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FixedDeductionID))
		reflect.Indirect(reflect.ValueOf(&a.FixedDeductionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.FixedDeductionID, x.ID) {
			t.Error("foreign key was wrong value", a.FixedDeductionID, x.ID)
		}
	}
}

func testSalaryStatementToOneRemoveOpFixedDeductionUsingFixedDeduction(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SalaryStatement
	var b FixedDeduction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, fixedDeductionDBTypes, false, strmangle.SetComplement(fixedDeductionPrimaryKeyColumns, fixedDeductionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetFixedDeduction(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveFixedDeduction(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.FixedDeduction().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.FixedDeduction != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.FixedDeductionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SalaryStatements) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSalaryStatementToOneSetOpEmployeeUsingEmployee(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SalaryStatement
	var b, c Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Employee{&b, &c} {
		err = a.SetEmployee(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Employee != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SalaryStatements[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EmployeeID != x.ID {
			t.Error("foreign key was wrong value", a.EmployeeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EmployeeID))
		reflect.Indirect(reflect.ValueOf(&a.EmployeeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EmployeeID != x.ID {
			t.Error("foreign key was wrong value", a.EmployeeID, x.ID)
		}
	}
}

func testSalaryStatementsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SalaryStatement{}
	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSalaryStatementsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SalaryStatement{}
	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SalaryStatementSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSalaryStatementsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SalaryStatement{}
	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SalaryStatements().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	salaryStatementDBTypes = map[string]string{`ID`: `mediumint`, `EarningID`: `mediumint`, `FixedEarningID`: `mediumint`, `DeductionID`: `mediumint`, `FixedDeductionID`: `mediumint`, `EmployeeID`: `mediumint`, `Nominal`: `varchar`, `Payday`: `date`, `TargetPeriod`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                      = bytes.MinRead
)

func testSalaryStatementsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(salaryStatementPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(salaryStatementAllColumns) == len(salaryStatementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SalaryStatement{}
	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SalaryStatements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true, salaryStatementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSalaryStatementsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(salaryStatementAllColumns) == len(salaryStatementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SalaryStatement{}
	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SalaryStatements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, salaryStatementDBTypes, true, salaryStatementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(salaryStatementAllColumns, salaryStatementPrimaryKeyColumns) {
		fields = salaryStatementAllColumns
	} else {
		fields = strmangle.SetComplement(
			salaryStatementAllColumns,
			salaryStatementPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SalaryStatementSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSalaryStatementsUpsert(t *testing.T) {
	t.Parallel()

	if len(salaryStatementAllColumns) == len(salaryStatementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLSalaryStatementUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SalaryStatement{}
	if err = randomize.Struct(seed, &o, salaryStatementDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SalaryStatement: %s", err)
	}

	count, err := SalaryStatements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, salaryStatementDBTypes, false, salaryStatementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SalaryStatement: %s", err)
	}

	count, err = SalaryStatements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
