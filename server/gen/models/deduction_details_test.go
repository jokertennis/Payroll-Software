// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDeductionDetails(t *testing.T) {
	t.Parallel()

	query := DeductionDetails()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDeductionDetailsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetail{}
	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeductionDetailsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetail{}
	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DeductionDetails().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeductionDetailsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetail{}
	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeductionDetailSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeductionDetailsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetail{}
	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DeductionDetailExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DeductionDetail exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DeductionDetailExists to return true, but got false.")
	}
}

func testDeductionDetailsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetail{}
	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	deductionDetailFound, err := FindDeductionDetail(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if deductionDetailFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDeductionDetailsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetail{}
	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DeductionDetails().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDeductionDetailsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetail{}
	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DeductionDetails().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDeductionDetailsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	deductionDetailOne := &DeductionDetail{}
	deductionDetailTwo := &DeductionDetail{}
	if err = randomize.Struct(seed, deductionDetailOne, deductionDetailDBTypes, false, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, deductionDetailTwo, deductionDetailDBTypes, false, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deductionDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deductionDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeductionDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDeductionDetailsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	deductionDetailOne := &DeductionDetail{}
	deductionDetailTwo := &DeductionDetail{}
	if err = randomize.Struct(seed, deductionDetailOne, deductionDetailDBTypes, false, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, deductionDetailTwo, deductionDetailDBTypes, false, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deductionDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deductionDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func deductionDetailBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetail) error {
	*o = DeductionDetail{}
	return nil
}

func deductionDetailAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetail) error {
	*o = DeductionDetail{}
	return nil
}

func deductionDetailAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetail) error {
	*o = DeductionDetail{}
	return nil
}

func deductionDetailBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetail) error {
	*o = DeductionDetail{}
	return nil
}

func deductionDetailAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetail) error {
	*o = DeductionDetail{}
	return nil
}

func deductionDetailBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetail) error {
	*o = DeductionDetail{}
	return nil
}

func deductionDetailAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetail) error {
	*o = DeductionDetail{}
	return nil
}

func deductionDetailBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetail) error {
	*o = DeductionDetail{}
	return nil
}

func deductionDetailAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeductionDetail) error {
	*o = DeductionDetail{}
	return nil
}

func testDeductionDetailsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DeductionDetail{}
	o := &DeductionDetail{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, deductionDetailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeductionDetail object: %s", err)
	}

	AddDeductionDetailHook(boil.BeforeInsertHook, deductionDetailBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	deductionDetailBeforeInsertHooks = []DeductionDetailHook{}

	AddDeductionDetailHook(boil.AfterInsertHook, deductionDetailAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	deductionDetailAfterInsertHooks = []DeductionDetailHook{}

	AddDeductionDetailHook(boil.AfterSelectHook, deductionDetailAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	deductionDetailAfterSelectHooks = []DeductionDetailHook{}

	AddDeductionDetailHook(boil.BeforeUpdateHook, deductionDetailBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	deductionDetailBeforeUpdateHooks = []DeductionDetailHook{}

	AddDeductionDetailHook(boil.AfterUpdateHook, deductionDetailAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	deductionDetailAfterUpdateHooks = []DeductionDetailHook{}

	AddDeductionDetailHook(boil.BeforeDeleteHook, deductionDetailBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	deductionDetailBeforeDeleteHooks = []DeductionDetailHook{}

	AddDeductionDetailHook(boil.AfterDeleteHook, deductionDetailAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	deductionDetailAfterDeleteHooks = []DeductionDetailHook{}

	AddDeductionDetailHook(boil.BeforeUpsertHook, deductionDetailBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	deductionDetailBeforeUpsertHooks = []DeductionDetailHook{}

	AddDeductionDetailHook(boil.AfterUpsertHook, deductionDetailAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	deductionDetailAfterUpsertHooks = []DeductionDetailHook{}
}

func testDeductionDetailsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetail{}
	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeductionDetailsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetail{}
	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(deductionDetailColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeductionDetailToOneDeductionUsingDeduction(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DeductionDetail
	var foreign Deduction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, deductionDetailDBTypes, false, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, deductionDBTypes, false, deductionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Deduction struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DeductionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Deduction().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddDeductionHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Deduction) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DeductionDetailSlice{&local}
	if err = local.L.LoadDeduction(ctx, tx, false, (*[]*DeductionDetail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Deduction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Deduction = nil
	if err = local.L.LoadDeduction(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Deduction == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDeductionDetailToOneSetOpDeductionUsingDeduction(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DeductionDetail
	var b, c Deduction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deductionDetailDBTypes, false, strmangle.SetComplement(deductionDetailPrimaryKeyColumns, deductionDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, deductionDBTypes, false, strmangle.SetComplement(deductionPrimaryKeyColumns, deductionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, deductionDBTypes, false, strmangle.SetComplement(deductionPrimaryKeyColumns, deductionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Deduction{&b, &c} {
		err = a.SetDeduction(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Deduction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DeductionDetails[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DeductionID != x.ID {
			t.Error("foreign key was wrong value", a.DeductionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DeductionID))
		reflect.Indirect(reflect.ValueOf(&a.DeductionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DeductionID != x.ID {
			t.Error("foreign key was wrong value", a.DeductionID, x.ID)
		}
	}
}

func testDeductionDetailsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetail{}
	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeductionDetailsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetail{}
	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeductionDetailSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeductionDetailsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetail{}
	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeductionDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	deductionDetailDBTypes = map[string]string{`ID`: `mediumint`, `DeductionID`: `mediumint`, `Nominal`: `varchar`, `Amount`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                      = bytes.MinRead
)

func testDeductionDetailsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(deductionDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(deductionDetailAllColumns) == len(deductionDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetail{}
	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true, deductionDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDeductionDetailsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(deductionDetailAllColumns) == len(deductionDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeductionDetail{}
	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true, deductionDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deductionDetailDBTypes, true, deductionDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(deductionDetailAllColumns, deductionDetailPrimaryKeyColumns) {
		fields = deductionDetailAllColumns
	} else {
		fields = strmangle.SetComplement(
			deductionDetailAllColumns,
			deductionDetailPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DeductionDetailSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDeductionDetailsUpsert(t *testing.T) {
	t.Parallel()

	if len(deductionDetailAllColumns) == len(deductionDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDeductionDetailUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DeductionDetail{}
	if err = randomize.Struct(seed, &o, deductionDetailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeductionDetail: %s", err)
	}

	count, err := DeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, deductionDetailDBTypes, false, deductionDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeductionDetail struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeductionDetail: %s", err)
	}

	count, err = DeductionDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
