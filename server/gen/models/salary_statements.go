// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SalaryStatement is an object representing the database table.
type SalaryStatement struct {
	ID           uint32      `boil:"id" json:"id" toml:"id" yaml:"id"`
	EarningID    null.Uint32 `boil:"earning_id" json:"earning_id,omitempty" toml:"earning_id" yaml:"earning_id,omitempty"`
	DeductionID  null.Uint32 `boil:"deduction_id" json:"deduction_id,omitempty" toml:"deduction_id" yaml:"deduction_id,omitempty"`
	EmployeeID   uint32      `boil:"employee_id" json:"employee_id" toml:"employee_id" yaml:"employee_id"`
	Nominal      string      `boil:"nominal" json:"nominal" toml:"nominal" yaml:"nominal"`
	Payday       time.Time   `boil:"payday" json:"payday" toml:"payday" yaml:"payday"`
	TargetPeriod string      `boil:"target_period" json:"target_period" toml:"target_period" yaml:"target_period"`
	CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *salaryStatementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L salaryStatementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SalaryStatementColumns = struct {
	ID           string
	EarningID    string
	DeductionID  string
	EmployeeID   string
	Nominal      string
	Payday       string
	TargetPeriod string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	EarningID:    "earning_id",
	DeductionID:  "deduction_id",
	EmployeeID:   "employee_id",
	Nominal:      "nominal",
	Payday:       "payday",
	TargetPeriod: "target_period",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var SalaryStatementTableColumns = struct {
	ID           string
	EarningID    string
	DeductionID  string
	EmployeeID   string
	Nominal      string
	Payday       string
	TargetPeriod string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "salary_statements.id",
	EarningID:    "salary_statements.earning_id",
	DeductionID:  "salary_statements.deduction_id",
	EmployeeID:   "salary_statements.employee_id",
	Nominal:      "salary_statements.nominal",
	Payday:       "salary_statements.payday",
	TargetPeriod: "salary_statements.target_period",
	CreatedAt:    "salary_statements.created_at",
	UpdatedAt:    "salary_statements.updated_at",
}

// Generated where

type whereHelpernull_Uint32 struct{ field string }

func (w whereHelpernull_Uint32) EQ(x null.Uint32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Uint32) NEQ(x null.Uint32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Uint32) LT(x null.Uint32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Uint32) LTE(x null.Uint32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Uint32) GT(x null.Uint32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Uint32) GTE(x null.Uint32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Uint32) IN(slice []uint32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Uint32) NIN(slice []uint32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Uint32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Uint32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SalaryStatementWhere = struct {
	ID           whereHelperuint32
	EarningID    whereHelpernull_Uint32
	DeductionID  whereHelpernull_Uint32
	EmployeeID   whereHelperuint32
	Nominal      whereHelperstring
	Payday       whereHelpertime_Time
	TargetPeriod whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	ID:           whereHelperuint32{field: "`salary_statements`.`id`"},
	EarningID:    whereHelpernull_Uint32{field: "`salary_statements`.`earning_id`"},
	DeductionID:  whereHelpernull_Uint32{field: "`salary_statements`.`deduction_id`"},
	EmployeeID:   whereHelperuint32{field: "`salary_statements`.`employee_id`"},
	Nominal:      whereHelperstring{field: "`salary_statements`.`nominal`"},
	Payday:       whereHelpertime_Time{field: "`salary_statements`.`payday`"},
	TargetPeriod: whereHelperstring{field: "`salary_statements`.`target_period`"},
	CreatedAt:    whereHelpertime_Time{field: "`salary_statements`.`created_at`"},
	UpdatedAt:    whereHelpertime_Time{field: "`salary_statements`.`updated_at`"},
}

// SalaryStatementRels is where relationship names are stored.
var SalaryStatementRels = struct {
	Earning   string
	Deduction string
	Employee  string
}{
	Earning:   "Earning",
	Deduction: "Deduction",
	Employee:  "Employee",
}

// salaryStatementR is where relationships are stored.
type salaryStatementR struct {
	Earning   *Earning   `boil:"Earning" json:"Earning" toml:"Earning" yaml:"Earning"`
	Deduction *Deduction `boil:"Deduction" json:"Deduction" toml:"Deduction" yaml:"Deduction"`
	Employee  *Employee  `boil:"Employee" json:"Employee" toml:"Employee" yaml:"Employee"`
}

// NewStruct creates a new relationship struct
func (*salaryStatementR) NewStruct() *salaryStatementR {
	return &salaryStatementR{}
}

func (r *salaryStatementR) GetEarning() *Earning {
	if r == nil {
		return nil
	}
	return r.Earning
}

func (r *salaryStatementR) GetDeduction() *Deduction {
	if r == nil {
		return nil
	}
	return r.Deduction
}

func (r *salaryStatementR) GetEmployee() *Employee {
	if r == nil {
		return nil
	}
	return r.Employee
}

// salaryStatementL is where Load methods for each relationship are stored.
type salaryStatementL struct{}

var (
	salaryStatementAllColumns            = []string{"id", "earning_id", "deduction_id", "employee_id", "nominal", "payday", "target_period", "created_at", "updated_at"}
	salaryStatementColumnsWithoutDefault = []string{"earning_id", "deduction_id", "employee_id", "nominal", "payday", "target_period", "created_at", "updated_at"}
	salaryStatementColumnsWithDefault    = []string{"id"}
	salaryStatementPrimaryKeyColumns     = []string{"id"}
	salaryStatementGeneratedColumns      = []string{}
)

type (
	// SalaryStatementSlice is an alias for a slice of pointers to SalaryStatement.
	// This should almost always be used instead of []SalaryStatement.
	SalaryStatementSlice []*SalaryStatement
	// SalaryStatementHook is the signature for custom SalaryStatement hook methods
	SalaryStatementHook func(context.Context, boil.ContextExecutor, *SalaryStatement) error

	salaryStatementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	salaryStatementType                 = reflect.TypeOf(&SalaryStatement{})
	salaryStatementMapping              = queries.MakeStructMapping(salaryStatementType)
	salaryStatementPrimaryKeyMapping, _ = queries.BindMapping(salaryStatementType, salaryStatementMapping, salaryStatementPrimaryKeyColumns)
	salaryStatementInsertCacheMut       sync.RWMutex
	salaryStatementInsertCache          = make(map[string]insertCache)
	salaryStatementUpdateCacheMut       sync.RWMutex
	salaryStatementUpdateCache          = make(map[string]updateCache)
	salaryStatementUpsertCacheMut       sync.RWMutex
	salaryStatementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var salaryStatementAfterSelectHooks []SalaryStatementHook

var salaryStatementBeforeInsertHooks []SalaryStatementHook
var salaryStatementAfterInsertHooks []SalaryStatementHook

var salaryStatementBeforeUpdateHooks []SalaryStatementHook
var salaryStatementAfterUpdateHooks []SalaryStatementHook

var salaryStatementBeforeDeleteHooks []SalaryStatementHook
var salaryStatementAfterDeleteHooks []SalaryStatementHook

var salaryStatementBeforeUpsertHooks []SalaryStatementHook
var salaryStatementAfterUpsertHooks []SalaryStatementHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SalaryStatement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryStatementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SalaryStatement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryStatementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SalaryStatement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryStatementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SalaryStatement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryStatementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SalaryStatement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryStatementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SalaryStatement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryStatementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SalaryStatement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryStatementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SalaryStatement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryStatementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SalaryStatement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryStatementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSalaryStatementHook registers your hook function for all future operations.
func AddSalaryStatementHook(hookPoint boil.HookPoint, salaryStatementHook SalaryStatementHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		salaryStatementAfterSelectHooks = append(salaryStatementAfterSelectHooks, salaryStatementHook)
	case boil.BeforeInsertHook:
		salaryStatementBeforeInsertHooks = append(salaryStatementBeforeInsertHooks, salaryStatementHook)
	case boil.AfterInsertHook:
		salaryStatementAfterInsertHooks = append(salaryStatementAfterInsertHooks, salaryStatementHook)
	case boil.BeforeUpdateHook:
		salaryStatementBeforeUpdateHooks = append(salaryStatementBeforeUpdateHooks, salaryStatementHook)
	case boil.AfterUpdateHook:
		salaryStatementAfterUpdateHooks = append(salaryStatementAfterUpdateHooks, salaryStatementHook)
	case boil.BeforeDeleteHook:
		salaryStatementBeforeDeleteHooks = append(salaryStatementBeforeDeleteHooks, salaryStatementHook)
	case boil.AfterDeleteHook:
		salaryStatementAfterDeleteHooks = append(salaryStatementAfterDeleteHooks, salaryStatementHook)
	case boil.BeforeUpsertHook:
		salaryStatementBeforeUpsertHooks = append(salaryStatementBeforeUpsertHooks, salaryStatementHook)
	case boil.AfterUpsertHook:
		salaryStatementAfterUpsertHooks = append(salaryStatementAfterUpsertHooks, salaryStatementHook)
	}
}

// One returns a single salaryStatement record from the query.
func (q salaryStatementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SalaryStatement, error) {
	o := &SalaryStatement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for salary_statements")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SalaryStatement records from the query.
func (q salaryStatementQuery) All(ctx context.Context, exec boil.ContextExecutor) (SalaryStatementSlice, error) {
	var o []*SalaryStatement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SalaryStatement slice")
	}

	if len(salaryStatementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SalaryStatement records in the query.
func (q salaryStatementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count salary_statements rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q salaryStatementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if salary_statements exists")
	}

	return count > 0, nil
}

// Earning pointed to by the foreign key.
func (o *SalaryStatement) Earning(mods ...qm.QueryMod) earningQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.EarningID),
	}

	queryMods = append(queryMods, mods...)

	return Earnings(queryMods...)
}

// Deduction pointed to by the foreign key.
func (o *SalaryStatement) Deduction(mods ...qm.QueryMod) deductionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.DeductionID),
	}

	queryMods = append(queryMods, mods...)

	return Deductions(queryMods...)
}

// Employee pointed to by the foreign key.
func (o *SalaryStatement) Employee(mods ...qm.QueryMod) employeeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.EmployeeID),
	}

	queryMods = append(queryMods, mods...)

	return Employees(queryMods...)
}

// LoadEarning allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (salaryStatementL) LoadEarning(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSalaryStatement interface{}, mods queries.Applicator) error {
	var slice []*SalaryStatement
	var object *SalaryStatement

	if singular {
		var ok bool
		object, ok = maybeSalaryStatement.(*SalaryStatement)
		if !ok {
			object = new(SalaryStatement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSalaryStatement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSalaryStatement))
			}
		}
	} else {
		s, ok := maybeSalaryStatement.(*[]*SalaryStatement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSalaryStatement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSalaryStatement))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &salaryStatementR{}
		}
		if !queries.IsNil(object.EarningID) {
			args = append(args, object.EarningID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &salaryStatementR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EarningID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EarningID) {
				args = append(args, obj.EarningID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`earnings`),
		qm.WhereIn(`earnings.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Earning")
	}

	var resultSlice []*Earning
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Earning")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for earnings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for earnings")
	}

	if len(earningAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Earning = foreign
		if foreign.R == nil {
			foreign.R = &earningR{}
		}
		foreign.R.SalaryStatements = append(foreign.R.SalaryStatements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EarningID, foreign.ID) {
				local.R.Earning = foreign
				if foreign.R == nil {
					foreign.R = &earningR{}
				}
				foreign.R.SalaryStatements = append(foreign.R.SalaryStatements, local)
				break
			}
		}
	}

	return nil
}

// LoadDeduction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (salaryStatementL) LoadDeduction(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSalaryStatement interface{}, mods queries.Applicator) error {
	var slice []*SalaryStatement
	var object *SalaryStatement

	if singular {
		var ok bool
		object, ok = maybeSalaryStatement.(*SalaryStatement)
		if !ok {
			object = new(SalaryStatement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSalaryStatement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSalaryStatement))
			}
		}
	} else {
		s, ok := maybeSalaryStatement.(*[]*SalaryStatement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSalaryStatement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSalaryStatement))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &salaryStatementR{}
		}
		if !queries.IsNil(object.DeductionID) {
			args = append(args, object.DeductionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &salaryStatementR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DeductionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DeductionID) {
				args = append(args, obj.DeductionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`deductions`),
		qm.WhereIn(`deductions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Deduction")
	}

	var resultSlice []*Deduction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Deduction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for deductions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deductions")
	}

	if len(deductionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Deduction = foreign
		if foreign.R == nil {
			foreign.R = &deductionR{}
		}
		foreign.R.SalaryStatements = append(foreign.R.SalaryStatements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DeductionID, foreign.ID) {
				local.R.Deduction = foreign
				if foreign.R == nil {
					foreign.R = &deductionR{}
				}
				foreign.R.SalaryStatements = append(foreign.R.SalaryStatements, local)
				break
			}
		}
	}

	return nil
}

// LoadEmployee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (salaryStatementL) LoadEmployee(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSalaryStatement interface{}, mods queries.Applicator) error {
	var slice []*SalaryStatement
	var object *SalaryStatement

	if singular {
		var ok bool
		object, ok = maybeSalaryStatement.(*SalaryStatement)
		if !ok {
			object = new(SalaryStatement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSalaryStatement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSalaryStatement))
			}
		}
	} else {
		s, ok := maybeSalaryStatement.(*[]*SalaryStatement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSalaryStatement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSalaryStatement))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &salaryStatementR{}
		}
		args = append(args, object.EmployeeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &salaryStatementR{}
			}

			for _, a := range args {
				if a == obj.EmployeeID {
					continue Outer
				}
			}

			args = append(args, obj.EmployeeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`employees`),
		qm.WhereIn(`employees.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Employee")
	}

	var resultSlice []*Employee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Employee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for employees")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for employees")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Employee = foreign
		if foreign.R == nil {
			foreign.R = &employeeR{}
		}
		foreign.R.SalaryStatements = append(foreign.R.SalaryStatements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EmployeeID == foreign.ID {
				local.R.Employee = foreign
				if foreign.R == nil {
					foreign.R = &employeeR{}
				}
				foreign.R.SalaryStatements = append(foreign.R.SalaryStatements, local)
				break
			}
		}
	}

	return nil
}

// SetEarning of the salaryStatement to the related item.
// Sets o.R.Earning to related.
// Adds o to related.R.SalaryStatements.
func (o *SalaryStatement) SetEarning(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Earning) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `salary_statements` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"earning_id"}),
		strmangle.WhereClause("`", "`", 0, salaryStatementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EarningID, related.ID)
	if o.R == nil {
		o.R = &salaryStatementR{
			Earning: related,
		}
	} else {
		o.R.Earning = related
	}

	if related.R == nil {
		related.R = &earningR{
			SalaryStatements: SalaryStatementSlice{o},
		}
	} else {
		related.R.SalaryStatements = append(related.R.SalaryStatements, o)
	}

	return nil
}

// RemoveEarning relationship.
// Sets o.R.Earning to nil.
// Removes o from all passed in related items' relationships struct.
func (o *SalaryStatement) RemoveEarning(ctx context.Context, exec boil.ContextExecutor, related *Earning) error {
	var err error

	queries.SetScanner(&o.EarningID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("earning_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Earning = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SalaryStatements {
		if queries.Equal(o.EarningID, ri.EarningID) {
			continue
		}

		ln := len(related.R.SalaryStatements)
		if ln > 1 && i < ln-1 {
			related.R.SalaryStatements[i] = related.R.SalaryStatements[ln-1]
		}
		related.R.SalaryStatements = related.R.SalaryStatements[:ln-1]
		break
	}
	return nil
}

// SetDeduction of the salaryStatement to the related item.
// Sets o.R.Deduction to related.
// Adds o to related.R.SalaryStatements.
func (o *SalaryStatement) SetDeduction(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Deduction) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `salary_statements` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"deduction_id"}),
		strmangle.WhereClause("`", "`", 0, salaryStatementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DeductionID, related.ID)
	if o.R == nil {
		o.R = &salaryStatementR{
			Deduction: related,
		}
	} else {
		o.R.Deduction = related
	}

	if related.R == nil {
		related.R = &deductionR{
			SalaryStatements: SalaryStatementSlice{o},
		}
	} else {
		related.R.SalaryStatements = append(related.R.SalaryStatements, o)
	}

	return nil
}

// RemoveDeduction relationship.
// Sets o.R.Deduction to nil.
// Removes o from all passed in related items' relationships struct.
func (o *SalaryStatement) RemoveDeduction(ctx context.Context, exec boil.ContextExecutor, related *Deduction) error {
	var err error

	queries.SetScanner(&o.DeductionID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("deduction_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Deduction = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SalaryStatements {
		if queries.Equal(o.DeductionID, ri.DeductionID) {
			continue
		}

		ln := len(related.R.SalaryStatements)
		if ln > 1 && i < ln-1 {
			related.R.SalaryStatements[i] = related.R.SalaryStatements[ln-1]
		}
		related.R.SalaryStatements = related.R.SalaryStatements[:ln-1]
		break
	}
	return nil
}

// SetEmployee of the salaryStatement to the related item.
// Sets o.R.Employee to related.
// Adds o to related.R.SalaryStatements.
func (o *SalaryStatement) SetEmployee(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Employee) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `salary_statements` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"employee_id"}),
		strmangle.WhereClause("`", "`", 0, salaryStatementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EmployeeID = related.ID
	if o.R == nil {
		o.R = &salaryStatementR{
			Employee: related,
		}
	} else {
		o.R.Employee = related
	}

	if related.R == nil {
		related.R = &employeeR{
			SalaryStatements: SalaryStatementSlice{o},
		}
	} else {
		related.R.SalaryStatements = append(related.R.SalaryStatements, o)
	}

	return nil
}

// SalaryStatements retrieves all the records using an executor.
func SalaryStatements(mods ...qm.QueryMod) salaryStatementQuery {
	mods = append(mods, qm.From("`salary_statements`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`salary_statements`.*"})
	}

	return salaryStatementQuery{q}
}

// FindSalaryStatement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSalaryStatement(ctx context.Context, exec boil.ContextExecutor, iD uint32, selectCols ...string) (*SalaryStatement, error) {
	salaryStatementObj := &SalaryStatement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `salary_statements` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, salaryStatementObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from salary_statements")
	}

	if err = salaryStatementObj.doAfterSelectHooks(ctx, exec); err != nil {
		return salaryStatementObj, err
	}

	return salaryStatementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SalaryStatement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no salary_statements provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salaryStatementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	salaryStatementInsertCacheMut.RLock()
	cache, cached := salaryStatementInsertCache[key]
	salaryStatementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			salaryStatementAllColumns,
			salaryStatementColumnsWithDefault,
			salaryStatementColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(salaryStatementType, salaryStatementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(salaryStatementType, salaryStatementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `salary_statements` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `salary_statements` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `salary_statements` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, salaryStatementPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into salary_statements")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint32(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == salaryStatementMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for salary_statements")
	}

CacheNoHooks:
	if !cached {
		salaryStatementInsertCacheMut.Lock()
		salaryStatementInsertCache[key] = cache
		salaryStatementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SalaryStatement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SalaryStatement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	salaryStatementUpdateCacheMut.RLock()
	cache, cached := salaryStatementUpdateCache[key]
	salaryStatementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			salaryStatementAllColumns,
			salaryStatementPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update salary_statements, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `salary_statements` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, salaryStatementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(salaryStatementType, salaryStatementMapping, append(wl, salaryStatementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update salary_statements row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for salary_statements")
	}

	if !cached {
		salaryStatementUpdateCacheMut.Lock()
		salaryStatementUpdateCache[key] = cache
		salaryStatementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q salaryStatementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for salary_statements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for salary_statements")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SalaryStatementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salaryStatementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `salary_statements` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, salaryStatementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in salaryStatement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all salaryStatement")
	}
	return rowsAff, nil
}

var mySQLSalaryStatementUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SalaryStatement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no salary_statements provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salaryStatementColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSalaryStatementUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	salaryStatementUpsertCacheMut.RLock()
	cache, cached := salaryStatementUpsertCache[key]
	salaryStatementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			salaryStatementAllColumns,
			salaryStatementColumnsWithDefault,
			salaryStatementColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			salaryStatementAllColumns,
			salaryStatementPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert salary_statements, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`salary_statements`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `salary_statements` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(salaryStatementType, salaryStatementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(salaryStatementType, salaryStatementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for salary_statements")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint32(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == salaryStatementMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(salaryStatementType, salaryStatementMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for salary_statements")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for salary_statements")
	}

CacheNoHooks:
	if !cached {
		salaryStatementUpsertCacheMut.Lock()
		salaryStatementUpsertCache[key] = cache
		salaryStatementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SalaryStatement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SalaryStatement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SalaryStatement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), salaryStatementPrimaryKeyMapping)
	sql := "DELETE FROM `salary_statements` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from salary_statements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for salary_statements")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q salaryStatementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no salaryStatementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from salary_statements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for salary_statements")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SalaryStatementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(salaryStatementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salaryStatementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `salary_statements` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, salaryStatementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from salaryStatement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for salary_statements")
	}

	if len(salaryStatementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SalaryStatement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSalaryStatement(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SalaryStatementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SalaryStatementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salaryStatementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `salary_statements`.* FROM `salary_statements` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, salaryStatementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SalaryStatementSlice")
	}

	*o = slice

	return nil
}

// SalaryStatementExists checks if the SalaryStatement row exists.
func SalaryStatementExists(ctx context.Context, exec boil.ContextExecutor, iD uint32) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `salary_statements` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if salary_statements exists")
	}

	return exists, nil
}

// Exists checks if the SalaryStatement row exists.
func (o *SalaryStatement) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SalaryStatementExists(ctx, exec, o.ID)
}
