// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFixedEarnings(t *testing.T) {
	t.Parallel()

	query := FixedEarnings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFixedEarningsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedEarning{}
	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FixedEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFixedEarningsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedEarning{}
	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FixedEarnings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FixedEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFixedEarningsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedEarning{}
	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FixedEarningSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FixedEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFixedEarningsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedEarning{}
	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FixedEarningExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if FixedEarning exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FixedEarningExists to return true, but got false.")
	}
}

func testFixedEarningsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedEarning{}
	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	fixedEarningFound, err := FindFixedEarning(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if fixedEarningFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFixedEarningsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedEarning{}
	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FixedEarnings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFixedEarningsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedEarning{}
	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FixedEarnings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFixedEarningsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fixedEarningOne := &FixedEarning{}
	fixedEarningTwo := &FixedEarning{}
	if err = randomize.Struct(seed, fixedEarningOne, fixedEarningDBTypes, false, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}
	if err = randomize.Struct(seed, fixedEarningTwo, fixedEarningDBTypes, false, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fixedEarningOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fixedEarningTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FixedEarnings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFixedEarningsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	fixedEarningOne := &FixedEarning{}
	fixedEarningTwo := &FixedEarning{}
	if err = randomize.Struct(seed, fixedEarningOne, fixedEarningDBTypes, false, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}
	if err = randomize.Struct(seed, fixedEarningTwo, fixedEarningDBTypes, false, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fixedEarningOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fixedEarningTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FixedEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func fixedEarningBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FixedEarning) error {
	*o = FixedEarning{}
	return nil
}

func fixedEarningAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FixedEarning) error {
	*o = FixedEarning{}
	return nil
}

func fixedEarningAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FixedEarning) error {
	*o = FixedEarning{}
	return nil
}

func fixedEarningBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FixedEarning) error {
	*o = FixedEarning{}
	return nil
}

func fixedEarningAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FixedEarning) error {
	*o = FixedEarning{}
	return nil
}

func fixedEarningBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FixedEarning) error {
	*o = FixedEarning{}
	return nil
}

func fixedEarningAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FixedEarning) error {
	*o = FixedEarning{}
	return nil
}

func fixedEarningBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FixedEarning) error {
	*o = FixedEarning{}
	return nil
}

func fixedEarningAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FixedEarning) error {
	*o = FixedEarning{}
	return nil
}

func testFixedEarningsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FixedEarning{}
	o := &FixedEarning{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, fixedEarningDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FixedEarning object: %s", err)
	}

	AddFixedEarningHook(boil.BeforeInsertHook, fixedEarningBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	fixedEarningBeforeInsertHooks = []FixedEarningHook{}

	AddFixedEarningHook(boil.AfterInsertHook, fixedEarningAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	fixedEarningAfterInsertHooks = []FixedEarningHook{}

	AddFixedEarningHook(boil.AfterSelectHook, fixedEarningAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	fixedEarningAfterSelectHooks = []FixedEarningHook{}

	AddFixedEarningHook(boil.BeforeUpdateHook, fixedEarningBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	fixedEarningBeforeUpdateHooks = []FixedEarningHook{}

	AddFixedEarningHook(boil.AfterUpdateHook, fixedEarningAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	fixedEarningAfterUpdateHooks = []FixedEarningHook{}

	AddFixedEarningHook(boil.BeforeDeleteHook, fixedEarningBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	fixedEarningBeforeDeleteHooks = []FixedEarningHook{}

	AddFixedEarningHook(boil.AfterDeleteHook, fixedEarningAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	fixedEarningAfterDeleteHooks = []FixedEarningHook{}

	AddFixedEarningHook(boil.BeforeUpsertHook, fixedEarningBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	fixedEarningBeforeUpsertHooks = []FixedEarningHook{}

	AddFixedEarningHook(boil.AfterUpsertHook, fixedEarningAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	fixedEarningAfterUpsertHooks = []FixedEarningHook{}
}

func testFixedEarningsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedEarning{}
	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FixedEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFixedEarningsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedEarning{}
	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(fixedEarningColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FixedEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFixedEarningToManyFixedEarningDetails(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FixedEarning
	var b, c FixedEarningDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fixedEarningDBTypes, true, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, fixedEarningDetailDBTypes, false, fixedEarningDetailColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, fixedEarningDetailDBTypes, false, fixedEarningDetailColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FixedEarningID = a.ID
	c.FixedEarningID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FixedEarningDetails().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FixedEarningID == b.FixedEarningID {
			bFound = true
		}
		if v.FixedEarningID == c.FixedEarningID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FixedEarningSlice{&a}
	if err = a.L.LoadFixedEarningDetails(ctx, tx, false, (*[]*FixedEarning)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FixedEarningDetails); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FixedEarningDetails = nil
	if err = a.L.LoadFixedEarningDetails(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FixedEarningDetails); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testFixedEarningToManySalaryStatements(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FixedEarning
	var b, c SalaryStatement

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fixedEarningDBTypes, true, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, salaryStatementDBTypes, false, salaryStatementColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, salaryStatementDBTypes, false, salaryStatementColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FixedEarningID, a.ID)
	queries.Assign(&c.FixedEarningID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SalaryStatements().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FixedEarningID, b.FixedEarningID) {
			bFound = true
		}
		if queries.Equal(v.FixedEarningID, c.FixedEarningID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FixedEarningSlice{&a}
	if err = a.L.LoadSalaryStatements(ctx, tx, false, (*[]*FixedEarning)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SalaryStatements); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SalaryStatements = nil
	if err = a.L.LoadSalaryStatements(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SalaryStatements); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testFixedEarningToManyAddOpFixedEarningDetails(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FixedEarning
	var b, c, d, e FixedEarningDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fixedEarningDBTypes, false, strmangle.SetComplement(fixedEarningPrimaryKeyColumns, fixedEarningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FixedEarningDetail{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fixedEarningDetailDBTypes, false, strmangle.SetComplement(fixedEarningDetailPrimaryKeyColumns, fixedEarningDetailColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*FixedEarningDetail{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFixedEarningDetails(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.FixedEarningID {
			t.Error("foreign key was wrong value", a.ID, first.FixedEarningID)
		}
		if a.ID != second.FixedEarningID {
			t.Error("foreign key was wrong value", a.ID, second.FixedEarningID)
		}

		if first.R.FixedEarning != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FixedEarning != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FixedEarningDetails[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FixedEarningDetails[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FixedEarningDetails().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testFixedEarningToManyAddOpSalaryStatements(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FixedEarning
	var b, c, d, e SalaryStatement

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fixedEarningDBTypes, false, strmangle.SetComplement(fixedEarningPrimaryKeyColumns, fixedEarningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SalaryStatement{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SalaryStatement{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSalaryStatements(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.FixedEarningID) {
			t.Error("foreign key was wrong value", a.ID, first.FixedEarningID)
		}
		if !queries.Equal(a.ID, second.FixedEarningID) {
			t.Error("foreign key was wrong value", a.ID, second.FixedEarningID)
		}

		if first.R.FixedEarning != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FixedEarning != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SalaryStatements[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SalaryStatements[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SalaryStatements().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testFixedEarningToManySetOpSalaryStatements(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FixedEarning
	var b, c, d, e SalaryStatement

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fixedEarningDBTypes, false, strmangle.SetComplement(fixedEarningPrimaryKeyColumns, fixedEarningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SalaryStatement{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSalaryStatements(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SalaryStatements().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSalaryStatements(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SalaryStatements().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FixedEarningID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FixedEarningID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.FixedEarningID) {
		t.Error("foreign key was wrong value", a.ID, d.FixedEarningID)
	}
	if !queries.Equal(a.ID, e.FixedEarningID) {
		t.Error("foreign key was wrong value", a.ID, e.FixedEarningID)
	}

	if b.R.FixedEarning != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FixedEarning != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FixedEarning != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FixedEarning != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SalaryStatements[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SalaryStatements[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testFixedEarningToManyRemoveOpSalaryStatements(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FixedEarning
	var b, c, d, e SalaryStatement

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fixedEarningDBTypes, false, strmangle.SetComplement(fixedEarningPrimaryKeyColumns, fixedEarningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SalaryStatement{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSalaryStatements(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SalaryStatements().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSalaryStatements(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SalaryStatements().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FixedEarningID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FixedEarningID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.FixedEarning != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FixedEarning != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FixedEarning != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.FixedEarning != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SalaryStatements) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SalaryStatements[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SalaryStatements[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testFixedEarningsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedEarning{}
	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFixedEarningsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedEarning{}
	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FixedEarningSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFixedEarningsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FixedEarning{}
	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FixedEarnings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	fixedEarningDBTypes = map[string]string{`ID`: `mediumint`, `Nominal`: `varchar`, `Amount`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                   = bytes.MinRead
)

func testFixedEarningsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(fixedEarningPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(fixedEarningAllColumns) == len(fixedEarningPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FixedEarning{}
	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FixedEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true, fixedEarningPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFixedEarningsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(fixedEarningAllColumns) == len(fixedEarningPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FixedEarning{}
	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true, fixedEarningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FixedEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fixedEarningDBTypes, true, fixedEarningPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(fixedEarningAllColumns, fixedEarningPrimaryKeyColumns) {
		fields = fixedEarningAllColumns
	} else {
		fields = strmangle.SetComplement(
			fixedEarningAllColumns,
			fixedEarningPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FixedEarningSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFixedEarningsUpsert(t *testing.T) {
	t.Parallel()

	if len(fixedEarningAllColumns) == len(fixedEarningPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLFixedEarningUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FixedEarning{}
	if err = randomize.Struct(seed, &o, fixedEarningDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FixedEarning: %s", err)
	}

	count, err := FixedEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, fixedEarningDBTypes, false, fixedEarningPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FixedEarning struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FixedEarning: %s", err)
	}

	count, err = FixedEarnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
