// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FixedDeduction is an object representing the database table.
type FixedDeduction struct {
	ID        uint32    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Amount    int       `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Nominal   string    `boil:"nominal" json:"nominal" toml:"nominal" yaml:"nominal"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *fixedDeductionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fixedDeductionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FixedDeductionColumns = struct {
	ID        string
	Amount    string
	Nominal   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Amount:    "amount",
	Nominal:   "nominal",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var FixedDeductionTableColumns = struct {
	ID        string
	Amount    string
	Nominal   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "fixed_deductions.id",
	Amount:    "fixed_deductions.amount",
	Nominal:   "fixed_deductions.nominal",
	CreatedAt: "fixed_deductions.created_at",
	UpdatedAt: "fixed_deductions.updated_at",
}

// Generated where

var FixedDeductionWhere = struct {
	ID        whereHelperuint32
	Amount    whereHelperint
	Nominal   whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperuint32{field: "`fixed_deductions`.`id`"},
	Amount:    whereHelperint{field: "`fixed_deductions`.`amount`"},
	Nominal:   whereHelperstring{field: "`fixed_deductions`.`nominal`"},
	CreatedAt: whereHelpertime_Time{field: "`fixed_deductions`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`fixed_deductions`.`updated_at`"},
}

// FixedDeductionRels is where relationship names are stored.
var FixedDeductionRels = struct {
	FixedDeductionDetails string
	SalaryStatements      string
}{
	FixedDeductionDetails: "FixedDeductionDetails",
	SalaryStatements:      "SalaryStatements",
}

// fixedDeductionR is where relationships are stored.
type fixedDeductionR struct {
	FixedDeductionDetails FixedDeductionDetailSlice `boil:"FixedDeductionDetails" json:"FixedDeductionDetails" toml:"FixedDeductionDetails" yaml:"FixedDeductionDetails"`
	SalaryStatements      SalaryStatementSlice      `boil:"SalaryStatements" json:"SalaryStatements" toml:"SalaryStatements" yaml:"SalaryStatements"`
}

// NewStruct creates a new relationship struct
func (*fixedDeductionR) NewStruct() *fixedDeductionR {
	return &fixedDeductionR{}
}

func (r *fixedDeductionR) GetFixedDeductionDetails() FixedDeductionDetailSlice {
	if r == nil {
		return nil
	}
	return r.FixedDeductionDetails
}

func (r *fixedDeductionR) GetSalaryStatements() SalaryStatementSlice {
	if r == nil {
		return nil
	}
	return r.SalaryStatements
}

// fixedDeductionL is where Load methods for each relationship are stored.
type fixedDeductionL struct{}

var (
	fixedDeductionAllColumns            = []string{"id", "amount", "nominal", "created_at", "updated_at"}
	fixedDeductionColumnsWithoutDefault = []string{"amount", "nominal", "created_at", "updated_at"}
	fixedDeductionColumnsWithDefault    = []string{"id"}
	fixedDeductionPrimaryKeyColumns     = []string{"id"}
	fixedDeductionGeneratedColumns      = []string{}
)

type (
	// FixedDeductionSlice is an alias for a slice of pointers to FixedDeduction.
	// This should almost always be used instead of []FixedDeduction.
	FixedDeductionSlice []*FixedDeduction
	// FixedDeductionHook is the signature for custom FixedDeduction hook methods
	FixedDeductionHook func(context.Context, boil.ContextExecutor, *FixedDeduction) error

	fixedDeductionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fixedDeductionType                 = reflect.TypeOf(&FixedDeduction{})
	fixedDeductionMapping              = queries.MakeStructMapping(fixedDeductionType)
	fixedDeductionPrimaryKeyMapping, _ = queries.BindMapping(fixedDeductionType, fixedDeductionMapping, fixedDeductionPrimaryKeyColumns)
	fixedDeductionInsertCacheMut       sync.RWMutex
	fixedDeductionInsertCache          = make(map[string]insertCache)
	fixedDeductionUpdateCacheMut       sync.RWMutex
	fixedDeductionUpdateCache          = make(map[string]updateCache)
	fixedDeductionUpsertCacheMut       sync.RWMutex
	fixedDeductionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fixedDeductionAfterSelectHooks []FixedDeductionHook

var fixedDeductionBeforeInsertHooks []FixedDeductionHook
var fixedDeductionAfterInsertHooks []FixedDeductionHook

var fixedDeductionBeforeUpdateHooks []FixedDeductionHook
var fixedDeductionAfterUpdateHooks []FixedDeductionHook

var fixedDeductionBeforeDeleteHooks []FixedDeductionHook
var fixedDeductionAfterDeleteHooks []FixedDeductionHook

var fixedDeductionBeforeUpsertHooks []FixedDeductionHook
var fixedDeductionAfterUpsertHooks []FixedDeductionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FixedDeduction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixedDeductionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FixedDeduction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixedDeductionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FixedDeduction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixedDeductionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FixedDeduction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixedDeductionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FixedDeduction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixedDeductionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FixedDeduction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixedDeductionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FixedDeduction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixedDeductionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FixedDeduction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixedDeductionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FixedDeduction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixedDeductionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFixedDeductionHook registers your hook function for all future operations.
func AddFixedDeductionHook(hookPoint boil.HookPoint, fixedDeductionHook FixedDeductionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		fixedDeductionAfterSelectHooks = append(fixedDeductionAfterSelectHooks, fixedDeductionHook)
	case boil.BeforeInsertHook:
		fixedDeductionBeforeInsertHooks = append(fixedDeductionBeforeInsertHooks, fixedDeductionHook)
	case boil.AfterInsertHook:
		fixedDeductionAfterInsertHooks = append(fixedDeductionAfterInsertHooks, fixedDeductionHook)
	case boil.BeforeUpdateHook:
		fixedDeductionBeforeUpdateHooks = append(fixedDeductionBeforeUpdateHooks, fixedDeductionHook)
	case boil.AfterUpdateHook:
		fixedDeductionAfterUpdateHooks = append(fixedDeductionAfterUpdateHooks, fixedDeductionHook)
	case boil.BeforeDeleteHook:
		fixedDeductionBeforeDeleteHooks = append(fixedDeductionBeforeDeleteHooks, fixedDeductionHook)
	case boil.AfterDeleteHook:
		fixedDeductionAfterDeleteHooks = append(fixedDeductionAfterDeleteHooks, fixedDeductionHook)
	case boil.BeforeUpsertHook:
		fixedDeductionBeforeUpsertHooks = append(fixedDeductionBeforeUpsertHooks, fixedDeductionHook)
	case boil.AfterUpsertHook:
		fixedDeductionAfterUpsertHooks = append(fixedDeductionAfterUpsertHooks, fixedDeductionHook)
	}
}

// One returns a single fixedDeduction record from the query.
func (q fixedDeductionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FixedDeduction, error) {
	o := &FixedDeduction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for fixed_deductions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FixedDeduction records from the query.
func (q fixedDeductionQuery) All(ctx context.Context, exec boil.ContextExecutor) (FixedDeductionSlice, error) {
	var o []*FixedDeduction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FixedDeduction slice")
	}

	if len(fixedDeductionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FixedDeduction records in the query.
func (q fixedDeductionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count fixed_deductions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fixedDeductionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if fixed_deductions exists")
	}

	return count > 0, nil
}

// FixedDeductionDetails retrieves all the fixed_deduction_detail's FixedDeductionDetails with an executor.
func (o *FixedDeduction) FixedDeductionDetails(mods ...qm.QueryMod) fixedDeductionDetailQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`fixed_deduction_details`.`fixed_deduction_id`=?", o.ID),
	)

	return FixedDeductionDetails(queryMods...)
}

// SalaryStatements retrieves all the salary_statement's SalaryStatements with an executor.
func (o *FixedDeduction) SalaryStatements(mods ...qm.QueryMod) salaryStatementQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`salary_statements`.`fixed_deduction_id`=?", o.ID),
	)

	return SalaryStatements(queryMods...)
}

// LoadFixedDeductionDetails allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fixedDeductionL) LoadFixedDeductionDetails(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFixedDeduction interface{}, mods queries.Applicator) error {
	var slice []*FixedDeduction
	var object *FixedDeduction

	if singular {
		var ok bool
		object, ok = maybeFixedDeduction.(*FixedDeduction)
		if !ok {
			object = new(FixedDeduction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFixedDeduction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFixedDeduction))
			}
		}
	} else {
		s, ok := maybeFixedDeduction.(*[]*FixedDeduction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFixedDeduction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFixedDeduction))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fixedDeductionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fixedDeductionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fixed_deduction_details`),
		qm.WhereIn(`fixed_deduction_details.fixed_deduction_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load fixed_deduction_details")
	}

	var resultSlice []*FixedDeductionDetail
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice fixed_deduction_details")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on fixed_deduction_details")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fixed_deduction_details")
	}

	if len(fixedDeductionDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FixedDeductionDetails = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &fixedDeductionDetailR{}
			}
			foreign.R.FixedDeduction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FixedDeductionID {
				local.R.FixedDeductionDetails = append(local.R.FixedDeductionDetails, foreign)
				if foreign.R == nil {
					foreign.R = &fixedDeductionDetailR{}
				}
				foreign.R.FixedDeduction = local
				break
			}
		}
	}

	return nil
}

// LoadSalaryStatements allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fixedDeductionL) LoadSalaryStatements(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFixedDeduction interface{}, mods queries.Applicator) error {
	var slice []*FixedDeduction
	var object *FixedDeduction

	if singular {
		var ok bool
		object, ok = maybeFixedDeduction.(*FixedDeduction)
		if !ok {
			object = new(FixedDeduction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFixedDeduction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFixedDeduction))
			}
		}
	} else {
		s, ok := maybeFixedDeduction.(*[]*FixedDeduction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFixedDeduction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFixedDeduction))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fixedDeductionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fixedDeductionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`salary_statements`),
		qm.WhereIn(`salary_statements.fixed_deduction_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load salary_statements")
	}

	var resultSlice []*SalaryStatement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice salary_statements")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on salary_statements")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for salary_statements")
	}

	if len(salaryStatementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalaryStatements = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &salaryStatementR{}
			}
			foreign.R.FixedDeduction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FixedDeductionID) {
				local.R.SalaryStatements = append(local.R.SalaryStatements, foreign)
				if foreign.R == nil {
					foreign.R = &salaryStatementR{}
				}
				foreign.R.FixedDeduction = local
				break
			}
		}
	}

	return nil
}

// AddFixedDeductionDetails adds the given related objects to the existing relationships
// of the fixed_deduction, optionally inserting them as new records.
// Appends related to o.R.FixedDeductionDetails.
// Sets related.R.FixedDeduction appropriately.
func (o *FixedDeduction) AddFixedDeductionDetails(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FixedDeductionDetail) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FixedDeductionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `fixed_deduction_details` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"fixed_deduction_id"}),
				strmangle.WhereClause("`", "`", 0, fixedDeductionDetailPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FixedDeductionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &fixedDeductionR{
			FixedDeductionDetails: related,
		}
	} else {
		o.R.FixedDeductionDetails = append(o.R.FixedDeductionDetails, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fixedDeductionDetailR{
				FixedDeduction: o,
			}
		} else {
			rel.R.FixedDeduction = o
		}
	}
	return nil
}

// AddSalaryStatements adds the given related objects to the existing relationships
// of the fixed_deduction, optionally inserting them as new records.
// Appends related to o.R.SalaryStatements.
// Sets related.R.FixedDeduction appropriately.
func (o *FixedDeduction) AddSalaryStatements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SalaryStatement) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FixedDeductionID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `salary_statements` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"fixed_deduction_id"}),
				strmangle.WhereClause("`", "`", 0, salaryStatementPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FixedDeductionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &fixedDeductionR{
			SalaryStatements: related,
		}
	} else {
		o.R.SalaryStatements = append(o.R.SalaryStatements, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &salaryStatementR{
				FixedDeduction: o,
			}
		} else {
			rel.R.FixedDeduction = o
		}
	}
	return nil
}

// SetSalaryStatements removes all previously related items of the
// fixed_deduction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FixedDeduction's SalaryStatements accordingly.
// Replaces o.R.SalaryStatements with related.
// Sets related.R.FixedDeduction's SalaryStatements accordingly.
func (o *FixedDeduction) SetSalaryStatements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SalaryStatement) error {
	query := "update `salary_statements` set `fixed_deduction_id` = null where `fixed_deduction_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SalaryStatements {
			queries.SetScanner(&rel.FixedDeductionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.FixedDeduction = nil
		}
		o.R.SalaryStatements = nil
	}

	return o.AddSalaryStatements(ctx, exec, insert, related...)
}

// RemoveSalaryStatements relationships from objects passed in.
// Removes related items from R.SalaryStatements (uses pointer comparison, removal does not keep order)
// Sets related.R.FixedDeduction.
func (o *FixedDeduction) RemoveSalaryStatements(ctx context.Context, exec boil.ContextExecutor, related ...*SalaryStatement) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FixedDeductionID, nil)
		if rel.R != nil {
			rel.R.FixedDeduction = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("fixed_deduction_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SalaryStatements {
			if rel != ri {
				continue
			}

			ln := len(o.R.SalaryStatements)
			if ln > 1 && i < ln-1 {
				o.R.SalaryStatements[i] = o.R.SalaryStatements[ln-1]
			}
			o.R.SalaryStatements = o.R.SalaryStatements[:ln-1]
			break
		}
	}

	return nil
}

// FixedDeductions retrieves all the records using an executor.
func FixedDeductions(mods ...qm.QueryMod) fixedDeductionQuery {
	mods = append(mods, qm.From("`fixed_deductions`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`fixed_deductions`.*"})
	}

	return fixedDeductionQuery{q}
}

// FindFixedDeduction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFixedDeduction(ctx context.Context, exec boil.ContextExecutor, iD uint32, selectCols ...string) (*FixedDeduction, error) {
	fixedDeductionObj := &FixedDeduction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `fixed_deductions` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, fixedDeductionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from fixed_deductions")
	}

	if err = fixedDeductionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return fixedDeductionObj, err
	}

	return fixedDeductionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FixedDeduction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no fixed_deductions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fixedDeductionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fixedDeductionInsertCacheMut.RLock()
	cache, cached := fixedDeductionInsertCache[key]
	fixedDeductionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fixedDeductionAllColumns,
			fixedDeductionColumnsWithDefault,
			fixedDeductionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fixedDeductionType, fixedDeductionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fixedDeductionType, fixedDeductionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `fixed_deductions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `fixed_deductions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `fixed_deductions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, fixedDeductionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into fixed_deductions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint32(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == fixedDeductionMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for fixed_deductions")
	}

CacheNoHooks:
	if !cached {
		fixedDeductionInsertCacheMut.Lock()
		fixedDeductionInsertCache[key] = cache
		fixedDeductionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FixedDeduction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FixedDeduction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fixedDeductionUpdateCacheMut.RLock()
	cache, cached := fixedDeductionUpdateCache[key]
	fixedDeductionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fixedDeductionAllColumns,
			fixedDeductionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update fixed_deductions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `fixed_deductions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, fixedDeductionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fixedDeductionType, fixedDeductionMapping, append(wl, fixedDeductionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update fixed_deductions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for fixed_deductions")
	}

	if !cached {
		fixedDeductionUpdateCacheMut.Lock()
		fixedDeductionUpdateCache[key] = cache
		fixedDeductionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fixedDeductionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for fixed_deductions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for fixed_deductions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FixedDeductionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fixedDeductionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `fixed_deductions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fixedDeductionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fixedDeduction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fixedDeduction")
	}
	return rowsAff, nil
}

var mySQLFixedDeductionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FixedDeduction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no fixed_deductions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fixedDeductionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFixedDeductionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fixedDeductionUpsertCacheMut.RLock()
	cache, cached := fixedDeductionUpsertCache[key]
	fixedDeductionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fixedDeductionAllColumns,
			fixedDeductionColumnsWithDefault,
			fixedDeductionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			fixedDeductionAllColumns,
			fixedDeductionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert fixed_deductions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`fixed_deductions`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `fixed_deductions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(fixedDeductionType, fixedDeductionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fixedDeductionType, fixedDeductionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for fixed_deductions")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint32(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == fixedDeductionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(fixedDeductionType, fixedDeductionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for fixed_deductions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for fixed_deductions")
	}

CacheNoHooks:
	if !cached {
		fixedDeductionUpsertCacheMut.Lock()
		fixedDeductionUpsertCache[key] = cache
		fixedDeductionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FixedDeduction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FixedDeduction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FixedDeduction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fixedDeductionPrimaryKeyMapping)
	sql := "DELETE FROM `fixed_deductions` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from fixed_deductions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for fixed_deductions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fixedDeductionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fixedDeductionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fixed_deductions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for fixed_deductions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FixedDeductionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fixedDeductionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fixedDeductionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `fixed_deductions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fixedDeductionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fixedDeduction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for fixed_deductions")
	}

	if len(fixedDeductionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FixedDeduction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFixedDeduction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FixedDeductionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FixedDeductionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fixedDeductionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `fixed_deductions`.* FROM `fixed_deductions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fixedDeductionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FixedDeductionSlice")
	}

	*o = slice

	return nil
}

// FixedDeductionExists checks if the FixedDeduction row exists.
func FixedDeductionExists(ctx context.Context, exec boil.ContextExecutor, iD uint32) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `fixed_deductions` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if fixed_deductions exists")
	}

	return exists, nil
}

// Exists checks if the FixedDeduction row exists.
func (o *FixedDeduction) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FixedDeductionExists(ctx, exec, o.ID)
}
