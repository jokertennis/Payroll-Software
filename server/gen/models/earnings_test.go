// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEarnings(t *testing.T) {
	t.Parallel()

	query := Earnings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEarningsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earning{}
	if err = randomize.Struct(seed, o, earningDBTypes, true, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Earnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEarningsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earning{}
	if err = randomize.Struct(seed, o, earningDBTypes, true, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Earnings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Earnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEarningsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earning{}
	if err = randomize.Struct(seed, o, earningDBTypes, true, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EarningSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Earnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEarningsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earning{}
	if err = randomize.Struct(seed, o, earningDBTypes, true, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EarningExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Earning exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EarningExists to return true, but got false.")
	}
}

func testEarningsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earning{}
	if err = randomize.Struct(seed, o, earningDBTypes, true, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	earningFound, err := FindEarning(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if earningFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEarningsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earning{}
	if err = randomize.Struct(seed, o, earningDBTypes, true, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Earnings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEarningsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earning{}
	if err = randomize.Struct(seed, o, earningDBTypes, true, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Earnings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEarningsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	earningOne := &Earning{}
	earningTwo := &Earning{}
	if err = randomize.Struct(seed, earningOne, earningDBTypes, false, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}
	if err = randomize.Struct(seed, earningTwo, earningDBTypes, false, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = earningOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = earningTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Earnings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEarningsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	earningOne := &Earning{}
	earningTwo := &Earning{}
	if err = randomize.Struct(seed, earningOne, earningDBTypes, false, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}
	if err = randomize.Struct(seed, earningTwo, earningDBTypes, false, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = earningOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = earningTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Earnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func earningBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Earning) error {
	*o = Earning{}
	return nil
}

func earningAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Earning) error {
	*o = Earning{}
	return nil
}

func earningAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Earning) error {
	*o = Earning{}
	return nil
}

func earningBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Earning) error {
	*o = Earning{}
	return nil
}

func earningAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Earning) error {
	*o = Earning{}
	return nil
}

func earningBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Earning) error {
	*o = Earning{}
	return nil
}

func earningAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Earning) error {
	*o = Earning{}
	return nil
}

func earningBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Earning) error {
	*o = Earning{}
	return nil
}

func earningAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Earning) error {
	*o = Earning{}
	return nil
}

func testEarningsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Earning{}
	o := &Earning{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, earningDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Earning object: %s", err)
	}

	AddEarningHook(boil.BeforeInsertHook, earningBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	earningBeforeInsertHooks = []EarningHook{}

	AddEarningHook(boil.AfterInsertHook, earningAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	earningAfterInsertHooks = []EarningHook{}

	AddEarningHook(boil.AfterSelectHook, earningAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	earningAfterSelectHooks = []EarningHook{}

	AddEarningHook(boil.BeforeUpdateHook, earningBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	earningBeforeUpdateHooks = []EarningHook{}

	AddEarningHook(boil.AfterUpdateHook, earningAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	earningAfterUpdateHooks = []EarningHook{}

	AddEarningHook(boil.BeforeDeleteHook, earningBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	earningBeforeDeleteHooks = []EarningHook{}

	AddEarningHook(boil.AfterDeleteHook, earningAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	earningAfterDeleteHooks = []EarningHook{}

	AddEarningHook(boil.BeforeUpsertHook, earningBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	earningBeforeUpsertHooks = []EarningHook{}

	AddEarningHook(boil.AfterUpsertHook, earningAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	earningAfterUpsertHooks = []EarningHook{}
}

func testEarningsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earning{}
	if err = randomize.Struct(seed, o, earningDBTypes, true, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Earnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEarningsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earning{}
	if err = randomize.Struct(seed, o, earningDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(earningColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Earnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEarningOneToOneSalaryStatementUsingSalaryStatement(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign SalaryStatement
	var local Earning

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, salaryStatementDBTypes, true, salaryStatementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SalaryStatement struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, earningDBTypes, true, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.EarningID, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SalaryStatement().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.EarningID, foreign.EarningID) {
		t.Errorf("want: %v, got %v", foreign.EarningID, check.EarningID)
	}

	ranAfterSelectHook := false
	AddSalaryStatementHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *SalaryStatement) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := EarningSlice{&local}
	if err = local.L.LoadSalaryStatement(ctx, tx, false, (*[]*Earning)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SalaryStatement == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SalaryStatement = nil
	if err = local.L.LoadSalaryStatement(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SalaryStatement == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testEarningOneToOneSetOpSalaryStatementUsingSalaryStatement(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Earning
	var b, c SalaryStatement

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, earningDBTypes, false, strmangle.SetComplement(earningPrimaryKeyColumns, earningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SalaryStatement{&b, &c} {
		err = a.SetSalaryStatement(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SalaryStatement != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Earning != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.EarningID) {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.EarningID))
		reflect.Indirect(reflect.ValueOf(&x.EarningID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ID, x.EarningID) {
			t.Error("foreign key was wrong value", a.ID, x.EarningID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testEarningOneToOneRemoveOpSalaryStatementUsingSalaryStatement(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Earning
	var b SalaryStatement

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, earningDBTypes, false, strmangle.SetComplement(earningPrimaryKeyColumns, earningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, salaryStatementDBTypes, false, strmangle.SetComplement(salaryStatementPrimaryKeyColumns, salaryStatementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSalaryStatement(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSalaryStatement(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SalaryStatement().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SalaryStatement != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(b.EarningID) {
		t.Error("foreign key column should be nil")
	}

	if b.R.Earning != nil {
		t.Error("failed to remove a from b's relationships")
	}
}

func testEarningToManyEarningDetails(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Earning
	var b, c EarningDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, earningDBTypes, true, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, earningDetailDBTypes, false, earningDetailColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, earningDetailDBTypes, false, earningDetailColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EarningID = a.ID
	c.EarningID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.EarningDetails().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.EarningID == b.EarningID {
			bFound = true
		}
		if v.EarningID == c.EarningID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EarningSlice{&a}
	if err = a.L.LoadEarningDetails(ctx, tx, false, (*[]*Earning)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EarningDetails); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EarningDetails = nil
	if err = a.L.LoadEarningDetails(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EarningDetails); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testEarningToManyAddOpEarningDetails(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Earning
	var b, c, d, e EarningDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, earningDBTypes, false, strmangle.SetComplement(earningPrimaryKeyColumns, earningColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EarningDetail{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, earningDetailDBTypes, false, strmangle.SetComplement(earningDetailPrimaryKeyColumns, earningDetailColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*EarningDetail{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEarningDetails(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EarningID {
			t.Error("foreign key was wrong value", a.ID, first.EarningID)
		}
		if a.ID != second.EarningID {
			t.Error("foreign key was wrong value", a.ID, second.EarningID)
		}

		if first.R.Earning != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Earning != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EarningDetails[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EarningDetails[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EarningDetails().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testEarningsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earning{}
	if err = randomize.Struct(seed, o, earningDBTypes, true, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEarningsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earning{}
	if err = randomize.Struct(seed, o, earningDBTypes, true, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EarningSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEarningsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earning{}
	if err = randomize.Struct(seed, o, earningDBTypes, true, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Earnings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	earningDBTypes = map[string]string{`ID`: `mediumint`, `Nominal`: `varchar`, `Amount`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_              = bytes.MinRead
)

func testEarningsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(earningPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(earningAllColumns) == len(earningPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Earning{}
	if err = randomize.Struct(seed, o, earningDBTypes, true, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Earnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, earningDBTypes, true, earningPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEarningsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(earningAllColumns) == len(earningPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Earning{}
	if err = randomize.Struct(seed, o, earningDBTypes, true, earningColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Earnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, earningDBTypes, true, earningPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(earningAllColumns, earningPrimaryKeyColumns) {
		fields = earningAllColumns
	} else {
		fields = strmangle.SetComplement(
			earningAllColumns,
			earningPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EarningSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEarningsUpsert(t *testing.T) {
	t.Parallel()

	if len(earningAllColumns) == len(earningPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLEarningUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Earning{}
	if err = randomize.Struct(seed, &o, earningDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Earning: %s", err)
	}

	count, err := Earnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, earningDBTypes, false, earningPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Earning struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Earning: %s", err)
	}

	count, err = Earnings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
