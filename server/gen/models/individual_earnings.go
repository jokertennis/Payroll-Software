// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// IndividualEarning is an object representing the database table.
type IndividualEarning struct {
	ID        uint32    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Nominal   string    `boil:"nominal" json:"nominal" toml:"nominal" yaml:"nominal"`
	Amount    int       `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *individualEarningR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L individualEarningL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IndividualEarningColumns = struct {
	ID        string
	Nominal   string
	Amount    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Nominal:   "nominal",
	Amount:    "amount",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var IndividualEarningTableColumns = struct {
	ID        string
	Nominal   string
	Amount    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "individual_earnings.id",
	Nominal:   "individual_earnings.nominal",
	Amount:    "individual_earnings.amount",
	CreatedAt: "individual_earnings.created_at",
	UpdatedAt: "individual_earnings.updated_at",
}

// Generated where

var IndividualEarningWhere = struct {
	ID        whereHelperuint32
	Nominal   whereHelperstring
	Amount    whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperuint32{field: "`individual_earnings`.`id`"},
	Nominal:   whereHelperstring{field: "`individual_earnings`.`nominal`"},
	Amount:    whereHelperint{field: "`individual_earnings`.`amount`"},
	CreatedAt: whereHelpertime_Time{field: "`individual_earnings`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`individual_earnings`.`updated_at`"},
}

// IndividualEarningRels is where relationship names are stored.
var IndividualEarningRels = struct {
	SalaryStatement          string
	IndividualEarningDetails string
}{
	SalaryStatement:          "SalaryStatement",
	IndividualEarningDetails: "IndividualEarningDetails",
}

// individualEarningR is where relationships are stored.
type individualEarningR struct {
	SalaryStatement          *SalaryStatement             `boil:"SalaryStatement" json:"SalaryStatement" toml:"SalaryStatement" yaml:"SalaryStatement"`
	IndividualEarningDetails IndividualEarningDetailSlice `boil:"IndividualEarningDetails" json:"IndividualEarningDetails" toml:"IndividualEarningDetails" yaml:"IndividualEarningDetails"`
}

// NewStruct creates a new relationship struct
func (*individualEarningR) NewStruct() *individualEarningR {
	return &individualEarningR{}
}

func (r *individualEarningR) GetSalaryStatement() *SalaryStatement {
	if r == nil {
		return nil
	}
	return r.SalaryStatement
}

func (r *individualEarningR) GetIndividualEarningDetails() IndividualEarningDetailSlice {
	if r == nil {
		return nil
	}
	return r.IndividualEarningDetails
}

// individualEarningL is where Load methods for each relationship are stored.
type individualEarningL struct{}

var (
	individualEarningAllColumns            = []string{"id", "nominal", "amount", "created_at", "updated_at"}
	individualEarningColumnsWithoutDefault = []string{"nominal", "amount", "created_at", "updated_at"}
	individualEarningColumnsWithDefault    = []string{"id"}
	individualEarningPrimaryKeyColumns     = []string{"id"}
	individualEarningGeneratedColumns      = []string{}
)

type (
	// IndividualEarningSlice is an alias for a slice of pointers to IndividualEarning.
	// This should almost always be used instead of []IndividualEarning.
	IndividualEarningSlice []*IndividualEarning
	// IndividualEarningHook is the signature for custom IndividualEarning hook methods
	IndividualEarningHook func(context.Context, boil.ContextExecutor, *IndividualEarning) error

	individualEarningQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	individualEarningType                 = reflect.TypeOf(&IndividualEarning{})
	individualEarningMapping              = queries.MakeStructMapping(individualEarningType)
	individualEarningPrimaryKeyMapping, _ = queries.BindMapping(individualEarningType, individualEarningMapping, individualEarningPrimaryKeyColumns)
	individualEarningInsertCacheMut       sync.RWMutex
	individualEarningInsertCache          = make(map[string]insertCache)
	individualEarningUpdateCacheMut       sync.RWMutex
	individualEarningUpdateCache          = make(map[string]updateCache)
	individualEarningUpsertCacheMut       sync.RWMutex
	individualEarningUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var individualEarningAfterSelectHooks []IndividualEarningHook

var individualEarningBeforeInsertHooks []IndividualEarningHook
var individualEarningAfterInsertHooks []IndividualEarningHook

var individualEarningBeforeUpdateHooks []IndividualEarningHook
var individualEarningAfterUpdateHooks []IndividualEarningHook

var individualEarningBeforeDeleteHooks []IndividualEarningHook
var individualEarningAfterDeleteHooks []IndividualEarningHook

var individualEarningBeforeUpsertHooks []IndividualEarningHook
var individualEarningAfterUpsertHooks []IndividualEarningHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IndividualEarning) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IndividualEarning) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IndividualEarning) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IndividualEarning) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IndividualEarning) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IndividualEarning) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IndividualEarning) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IndividualEarning) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IndividualEarning) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIndividualEarningHook registers your hook function for all future operations.
func AddIndividualEarningHook(hookPoint boil.HookPoint, individualEarningHook IndividualEarningHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		individualEarningAfterSelectHooks = append(individualEarningAfterSelectHooks, individualEarningHook)
	case boil.BeforeInsertHook:
		individualEarningBeforeInsertHooks = append(individualEarningBeforeInsertHooks, individualEarningHook)
	case boil.AfterInsertHook:
		individualEarningAfterInsertHooks = append(individualEarningAfterInsertHooks, individualEarningHook)
	case boil.BeforeUpdateHook:
		individualEarningBeforeUpdateHooks = append(individualEarningBeforeUpdateHooks, individualEarningHook)
	case boil.AfterUpdateHook:
		individualEarningAfterUpdateHooks = append(individualEarningAfterUpdateHooks, individualEarningHook)
	case boil.BeforeDeleteHook:
		individualEarningBeforeDeleteHooks = append(individualEarningBeforeDeleteHooks, individualEarningHook)
	case boil.AfterDeleteHook:
		individualEarningAfterDeleteHooks = append(individualEarningAfterDeleteHooks, individualEarningHook)
	case boil.BeforeUpsertHook:
		individualEarningBeforeUpsertHooks = append(individualEarningBeforeUpsertHooks, individualEarningHook)
	case boil.AfterUpsertHook:
		individualEarningAfterUpsertHooks = append(individualEarningAfterUpsertHooks, individualEarningHook)
	}
}

// One returns a single individualEarning record from the query.
func (q individualEarningQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IndividualEarning, error) {
	o := &IndividualEarning{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for individual_earnings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all IndividualEarning records from the query.
func (q individualEarningQuery) All(ctx context.Context, exec boil.ContextExecutor) (IndividualEarningSlice, error) {
	var o []*IndividualEarning

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IndividualEarning slice")
	}

	if len(individualEarningAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all IndividualEarning records in the query.
func (q individualEarningQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count individual_earnings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q individualEarningQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if individual_earnings exists")
	}

	return count > 0, nil
}

// SalaryStatement pointed to by the foreign key.
func (o *IndividualEarning) SalaryStatement(mods ...qm.QueryMod) salaryStatementQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`individual_earning_id` = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return SalaryStatements(queryMods...)
}

// IndividualEarningDetails retrieves all the individual_earning_detail's IndividualEarningDetails with an executor.
func (o *IndividualEarning) IndividualEarningDetails(mods ...qm.QueryMod) individualEarningDetailQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`individual_earning_details`.`individual_earning_id`=?", o.ID),
	)

	return IndividualEarningDetails(queryMods...)
}

// LoadSalaryStatement allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (individualEarningL) LoadSalaryStatement(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIndividualEarning interface{}, mods queries.Applicator) error {
	var slice []*IndividualEarning
	var object *IndividualEarning

	if singular {
		var ok bool
		object, ok = maybeIndividualEarning.(*IndividualEarning)
		if !ok {
			object = new(IndividualEarning)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeIndividualEarning)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeIndividualEarning))
			}
		}
	} else {
		s, ok := maybeIndividualEarning.(*[]*IndividualEarning)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeIndividualEarning)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeIndividualEarning))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &individualEarningR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &individualEarningR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`salary_statements`),
		qm.WhereIn(`salary_statements.individual_earning_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SalaryStatement")
	}

	var resultSlice []*SalaryStatement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SalaryStatement")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for salary_statements")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for salary_statements")
	}

	if len(salaryStatementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SalaryStatement = foreign
		if foreign.R == nil {
			foreign.R = &salaryStatementR{}
		}
		foreign.R.IndividualEarning = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.IndividualEarningID) {
				local.R.SalaryStatement = foreign
				if foreign.R == nil {
					foreign.R = &salaryStatementR{}
				}
				foreign.R.IndividualEarning = local
				break
			}
		}
	}

	return nil
}

// LoadIndividualEarningDetails allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (individualEarningL) LoadIndividualEarningDetails(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIndividualEarning interface{}, mods queries.Applicator) error {
	var slice []*IndividualEarning
	var object *IndividualEarning

	if singular {
		var ok bool
		object, ok = maybeIndividualEarning.(*IndividualEarning)
		if !ok {
			object = new(IndividualEarning)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeIndividualEarning)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeIndividualEarning))
			}
		}
	} else {
		s, ok := maybeIndividualEarning.(*[]*IndividualEarning)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeIndividualEarning)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeIndividualEarning))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &individualEarningR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &individualEarningR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`individual_earning_details`),
		qm.WhereIn(`individual_earning_details.individual_earning_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load individual_earning_details")
	}

	var resultSlice []*IndividualEarningDetail
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice individual_earning_details")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on individual_earning_details")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for individual_earning_details")
	}

	if len(individualEarningDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IndividualEarningDetails = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &individualEarningDetailR{}
			}
			foreign.R.IndividualEarning = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IndividualEarningID {
				local.R.IndividualEarningDetails = append(local.R.IndividualEarningDetails, foreign)
				if foreign.R == nil {
					foreign.R = &individualEarningDetailR{}
				}
				foreign.R.IndividualEarning = local
				break
			}
		}
	}

	return nil
}

// SetSalaryStatement of the individualEarning to the related item.
// Sets o.R.SalaryStatement to related.
// Adds o to related.R.IndividualEarning.
func (o *IndividualEarning) SetSalaryStatement(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SalaryStatement) error {
	var err error

	if insert {
		queries.Assign(&related.IndividualEarningID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `salary_statements` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"individual_earning_id"}),
			strmangle.WhereClause("`", "`", 0, salaryStatementPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.IndividualEarningID, o.ID)
	}

	if o.R == nil {
		o.R = &individualEarningR{
			SalaryStatement: related,
		}
	} else {
		o.R.SalaryStatement = related
	}

	if related.R == nil {
		related.R = &salaryStatementR{
			IndividualEarning: o,
		}
	} else {
		related.R.IndividualEarning = o
	}
	return nil
}

// RemoveSalaryStatement relationship.
// Sets o.R.SalaryStatement to nil.
// Removes o from all passed in related items' relationships struct.
func (o *IndividualEarning) RemoveSalaryStatement(ctx context.Context, exec boil.ContextExecutor, related *SalaryStatement) error {
	var err error

	queries.SetScanner(&related.IndividualEarningID, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("individual_earning_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SalaryStatement = nil
	}

	if related == nil || related.R == nil {
		return nil
	}

	related.R.IndividualEarning = nil

	return nil
}

// AddIndividualEarningDetails adds the given related objects to the existing relationships
// of the individual_earning, optionally inserting them as new records.
// Appends related to o.R.IndividualEarningDetails.
// Sets related.R.IndividualEarning appropriately.
func (o *IndividualEarning) AddIndividualEarningDetails(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IndividualEarningDetail) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IndividualEarningID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `individual_earning_details` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"individual_earning_id"}),
				strmangle.WhereClause("`", "`", 0, individualEarningDetailPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IndividualEarningID = o.ID
		}
	}

	if o.R == nil {
		o.R = &individualEarningR{
			IndividualEarningDetails: related,
		}
	} else {
		o.R.IndividualEarningDetails = append(o.R.IndividualEarningDetails, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &individualEarningDetailR{
				IndividualEarning: o,
			}
		} else {
			rel.R.IndividualEarning = o
		}
	}
	return nil
}

// IndividualEarnings retrieves all the records using an executor.
func IndividualEarnings(mods ...qm.QueryMod) individualEarningQuery {
	mods = append(mods, qm.From("`individual_earnings`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`individual_earnings`.*"})
	}

	return individualEarningQuery{q}
}

// FindIndividualEarning retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIndividualEarning(ctx context.Context, exec boil.ContextExecutor, iD uint32, selectCols ...string) (*IndividualEarning, error) {
	individualEarningObj := &IndividualEarning{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `individual_earnings` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, individualEarningObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from individual_earnings")
	}

	if err = individualEarningObj.doAfterSelectHooks(ctx, exec); err != nil {
		return individualEarningObj, err
	}

	return individualEarningObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IndividualEarning) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no individual_earnings provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(individualEarningColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	individualEarningInsertCacheMut.RLock()
	cache, cached := individualEarningInsertCache[key]
	individualEarningInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			individualEarningAllColumns,
			individualEarningColumnsWithDefault,
			individualEarningColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(individualEarningType, individualEarningMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(individualEarningType, individualEarningMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `individual_earnings` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `individual_earnings` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `individual_earnings` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, individualEarningPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into individual_earnings")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint32(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == individualEarningMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for individual_earnings")
	}

CacheNoHooks:
	if !cached {
		individualEarningInsertCacheMut.Lock()
		individualEarningInsertCache[key] = cache
		individualEarningInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the IndividualEarning.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IndividualEarning) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	individualEarningUpdateCacheMut.RLock()
	cache, cached := individualEarningUpdateCache[key]
	individualEarningUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			individualEarningAllColumns,
			individualEarningPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update individual_earnings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `individual_earnings` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, individualEarningPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(individualEarningType, individualEarningMapping, append(wl, individualEarningPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update individual_earnings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for individual_earnings")
	}

	if !cached {
		individualEarningUpdateCacheMut.Lock()
		individualEarningUpdateCache[key] = cache
		individualEarningUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q individualEarningQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for individual_earnings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for individual_earnings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IndividualEarningSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), individualEarningPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `individual_earnings` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, individualEarningPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in individualEarning slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all individualEarning")
	}
	return rowsAff, nil
}

var mySQLIndividualEarningUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IndividualEarning) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no individual_earnings provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(individualEarningColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLIndividualEarningUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	individualEarningUpsertCacheMut.RLock()
	cache, cached := individualEarningUpsertCache[key]
	individualEarningUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			individualEarningAllColumns,
			individualEarningColumnsWithDefault,
			individualEarningColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			individualEarningAllColumns,
			individualEarningPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert individual_earnings, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`individual_earnings`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `individual_earnings` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(individualEarningType, individualEarningMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(individualEarningType, individualEarningMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for individual_earnings")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint32(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == individualEarningMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(individualEarningType, individualEarningMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for individual_earnings")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for individual_earnings")
	}

CacheNoHooks:
	if !cached {
		individualEarningUpsertCacheMut.Lock()
		individualEarningUpsertCache[key] = cache
		individualEarningUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single IndividualEarning record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IndividualEarning) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IndividualEarning provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), individualEarningPrimaryKeyMapping)
	sql := "DELETE FROM `individual_earnings` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from individual_earnings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for individual_earnings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q individualEarningQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no individualEarningQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from individual_earnings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for individual_earnings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IndividualEarningSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(individualEarningBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), individualEarningPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `individual_earnings` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, individualEarningPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from individualEarning slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for individual_earnings")
	}

	if len(individualEarningAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IndividualEarning) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIndividualEarning(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IndividualEarningSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IndividualEarningSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), individualEarningPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `individual_earnings`.* FROM `individual_earnings` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, individualEarningPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IndividualEarningSlice")
	}

	*o = slice

	return nil
}

// IndividualEarningExists checks if the IndividualEarning row exists.
func IndividualEarningExists(ctx context.Context, exec boil.ContextExecutor, iD uint32) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `individual_earnings` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if individual_earnings exists")
	}

	return exists, nil
}

// Exists checks if the IndividualEarning row exists.
func (o *IndividualEarning) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return IndividualEarningExists(ctx, exec, o.ID)
}
