// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Companies", testCompanies)
	t.Run("DeductionDetailsTables", testDeductionDetailsTables)
	t.Run("Deductions", testDeductions)
	t.Run("EarningDetails", testEarningDetails)
	t.Run("Earnings", testEarnings)
	t.Run("Employees", testEmployees)
	t.Run("FixedDeductionDetails", testFixedDeductionDetails)
	t.Run("FixedDeductions", testFixedDeductions)
	t.Run("FixedEarningDetails", testFixedEarningDetails)
	t.Run("FixedEarnings", testFixedEarnings)
	t.Run("SalaryStatements", testSalaryStatements)
	t.Run("SchemaMigrations", testSchemaMigrations)
}

func TestDelete(t *testing.T) {
	t.Run("Companies", testCompaniesDelete)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesDelete)
	t.Run("Deductions", testDeductionsDelete)
	t.Run("EarningDetails", testEarningDetailsDelete)
	t.Run("Earnings", testEarningsDelete)
	t.Run("Employees", testEmployeesDelete)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsDelete)
	t.Run("FixedDeductions", testFixedDeductionsDelete)
	t.Run("FixedEarningDetails", testFixedEarningDetailsDelete)
	t.Run("FixedEarnings", testFixedEarningsDelete)
	t.Run("SalaryStatements", testSalaryStatementsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Companies", testCompaniesQueryDeleteAll)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesQueryDeleteAll)
	t.Run("Deductions", testDeductionsQueryDeleteAll)
	t.Run("EarningDetails", testEarningDetailsQueryDeleteAll)
	t.Run("Earnings", testEarningsQueryDeleteAll)
	t.Run("Employees", testEmployeesQueryDeleteAll)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsQueryDeleteAll)
	t.Run("FixedDeductions", testFixedDeductionsQueryDeleteAll)
	t.Run("FixedEarningDetails", testFixedEarningDetailsQueryDeleteAll)
	t.Run("FixedEarnings", testFixedEarningsQueryDeleteAll)
	t.Run("SalaryStatements", testSalaryStatementsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Companies", testCompaniesSliceDeleteAll)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesSliceDeleteAll)
	t.Run("Deductions", testDeductionsSliceDeleteAll)
	t.Run("EarningDetails", testEarningDetailsSliceDeleteAll)
	t.Run("Earnings", testEarningsSliceDeleteAll)
	t.Run("Employees", testEmployeesSliceDeleteAll)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsSliceDeleteAll)
	t.Run("FixedDeductions", testFixedDeductionsSliceDeleteAll)
	t.Run("FixedEarningDetails", testFixedEarningDetailsSliceDeleteAll)
	t.Run("FixedEarnings", testFixedEarningsSliceDeleteAll)
	t.Run("SalaryStatements", testSalaryStatementsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Companies", testCompaniesExists)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesExists)
	t.Run("Deductions", testDeductionsExists)
	t.Run("EarningDetails", testEarningDetailsExists)
	t.Run("Earnings", testEarningsExists)
	t.Run("Employees", testEmployeesExists)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsExists)
	t.Run("FixedDeductions", testFixedDeductionsExists)
	t.Run("FixedEarningDetails", testFixedEarningDetailsExists)
	t.Run("FixedEarnings", testFixedEarningsExists)
	t.Run("SalaryStatements", testSalaryStatementsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
}

func TestFind(t *testing.T) {
	t.Run("Companies", testCompaniesFind)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesFind)
	t.Run("Deductions", testDeductionsFind)
	t.Run("EarningDetails", testEarningDetailsFind)
	t.Run("Earnings", testEarningsFind)
	t.Run("Employees", testEmployeesFind)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsFind)
	t.Run("FixedDeductions", testFixedDeductionsFind)
	t.Run("FixedEarningDetails", testFixedEarningDetailsFind)
	t.Run("FixedEarnings", testFixedEarningsFind)
	t.Run("SalaryStatements", testSalaryStatementsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
}

func TestBind(t *testing.T) {
	t.Run("Companies", testCompaniesBind)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesBind)
	t.Run("Deductions", testDeductionsBind)
	t.Run("EarningDetails", testEarningDetailsBind)
	t.Run("Earnings", testEarningsBind)
	t.Run("Employees", testEmployeesBind)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsBind)
	t.Run("FixedDeductions", testFixedDeductionsBind)
	t.Run("FixedEarningDetails", testFixedEarningDetailsBind)
	t.Run("FixedEarnings", testFixedEarningsBind)
	t.Run("SalaryStatements", testSalaryStatementsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
}

func TestOne(t *testing.T) {
	t.Run("Companies", testCompaniesOne)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesOne)
	t.Run("Deductions", testDeductionsOne)
	t.Run("EarningDetails", testEarningDetailsOne)
	t.Run("Earnings", testEarningsOne)
	t.Run("Employees", testEmployeesOne)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsOne)
	t.Run("FixedDeductions", testFixedDeductionsOne)
	t.Run("FixedEarningDetails", testFixedEarningDetailsOne)
	t.Run("FixedEarnings", testFixedEarningsOne)
	t.Run("SalaryStatements", testSalaryStatementsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
}

func TestAll(t *testing.T) {
	t.Run("Companies", testCompaniesAll)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesAll)
	t.Run("Deductions", testDeductionsAll)
	t.Run("EarningDetails", testEarningDetailsAll)
	t.Run("Earnings", testEarningsAll)
	t.Run("Employees", testEmployeesAll)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsAll)
	t.Run("FixedDeductions", testFixedDeductionsAll)
	t.Run("FixedEarningDetails", testFixedEarningDetailsAll)
	t.Run("FixedEarnings", testFixedEarningsAll)
	t.Run("SalaryStatements", testSalaryStatementsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
}

func TestCount(t *testing.T) {
	t.Run("Companies", testCompaniesCount)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesCount)
	t.Run("Deductions", testDeductionsCount)
	t.Run("EarningDetails", testEarningDetailsCount)
	t.Run("Earnings", testEarningsCount)
	t.Run("Employees", testEmployeesCount)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsCount)
	t.Run("FixedDeductions", testFixedDeductionsCount)
	t.Run("FixedEarningDetails", testFixedEarningDetailsCount)
	t.Run("FixedEarnings", testFixedEarningsCount)
	t.Run("SalaryStatements", testSalaryStatementsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Companies", testCompaniesHooks)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesHooks)
	t.Run("Deductions", testDeductionsHooks)
	t.Run("EarningDetails", testEarningDetailsHooks)
	t.Run("Earnings", testEarningsHooks)
	t.Run("Employees", testEmployeesHooks)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsHooks)
	t.Run("FixedDeductions", testFixedDeductionsHooks)
	t.Run("FixedEarningDetails", testFixedEarningDetailsHooks)
	t.Run("FixedEarnings", testFixedEarningsHooks)
	t.Run("SalaryStatements", testSalaryStatementsHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Companies", testCompaniesInsert)
	t.Run("Companies", testCompaniesInsertWhitelist)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesInsert)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesInsertWhitelist)
	t.Run("Deductions", testDeductionsInsert)
	t.Run("Deductions", testDeductionsInsertWhitelist)
	t.Run("EarningDetails", testEarningDetailsInsert)
	t.Run("EarningDetails", testEarningDetailsInsertWhitelist)
	t.Run("Earnings", testEarningsInsert)
	t.Run("Earnings", testEarningsInsertWhitelist)
	t.Run("Employees", testEmployeesInsert)
	t.Run("Employees", testEmployeesInsertWhitelist)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsInsert)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsInsertWhitelist)
	t.Run("FixedDeductions", testFixedDeductionsInsert)
	t.Run("FixedDeductions", testFixedDeductionsInsertWhitelist)
	t.Run("FixedEarningDetails", testFixedEarningDetailsInsert)
	t.Run("FixedEarningDetails", testFixedEarningDetailsInsertWhitelist)
	t.Run("FixedEarnings", testFixedEarningsInsert)
	t.Run("FixedEarnings", testFixedEarningsInsertWhitelist)
	t.Run("SalaryStatements", testSalaryStatementsInsert)
	t.Run("SalaryStatements", testSalaryStatementsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("DeductionDetailsTableToDeductionUsingDeduction", testDeductionDetailsTableToOneDeductionUsingDeduction)
	t.Run("EarningDetailToEarningUsingEarning", testEarningDetailToOneEarningUsingEarning)
	t.Run("EmployeeToCompanyUsingCompany", testEmployeeToOneCompanyUsingCompany)
	t.Run("FixedDeductionDetailToFixedDeductionUsingFixedDeduction", testFixedDeductionDetailToOneFixedDeductionUsingFixedDeduction)
	t.Run("FixedEarningDetailToFixedEarningUsingFixedEarning", testFixedEarningDetailToOneFixedEarningUsingFixedEarning)
	t.Run("SalaryStatementToEarningUsingEarning", testSalaryStatementToOneEarningUsingEarning)
	t.Run("SalaryStatementToFixedEarningUsingFixedEarning", testSalaryStatementToOneFixedEarningUsingFixedEarning)
	t.Run("SalaryStatementToDeductionUsingDeduction", testSalaryStatementToOneDeductionUsingDeduction)
	t.Run("SalaryStatementToFixedDeductionUsingFixedDeduction", testSalaryStatementToOneFixedDeductionUsingFixedDeduction)
	t.Run("SalaryStatementToEmployeeUsingEmployee", testSalaryStatementToOneEmployeeUsingEmployee)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("DeductionToSalaryStatementUsingSalaryStatement", testDeductionOneToOneSalaryStatementUsingSalaryStatement)
	t.Run("EarningToSalaryStatementUsingSalaryStatement", testEarningOneToOneSalaryStatementUsingSalaryStatement)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CompanyToEmployees", testCompanyToManyEmployees)
	t.Run("DeductionToDeductionDetailsTables", testDeductionToManyDeductionDetailsTables)
	t.Run("EarningToEarningDetails", testEarningToManyEarningDetails)
	t.Run("EmployeeToSalaryStatements", testEmployeeToManySalaryStatements)
	t.Run("FixedDeductionToFixedDeductionDetails", testFixedDeductionToManyFixedDeductionDetails)
	t.Run("FixedDeductionToSalaryStatements", testFixedDeductionToManySalaryStatements)
	t.Run("FixedEarningToFixedEarningDetails", testFixedEarningToManyFixedEarningDetails)
	t.Run("FixedEarningToSalaryStatements", testFixedEarningToManySalaryStatements)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("DeductionDetailsTableToDeductionUsingDeductionDetailsTables", testDeductionDetailsTableToOneSetOpDeductionUsingDeduction)
	t.Run("EarningDetailToEarningUsingEarningDetails", testEarningDetailToOneSetOpEarningUsingEarning)
	t.Run("EmployeeToCompanyUsingEmployees", testEmployeeToOneSetOpCompanyUsingCompany)
	t.Run("FixedDeductionDetailToFixedDeductionUsingFixedDeductionDetails", testFixedDeductionDetailToOneSetOpFixedDeductionUsingFixedDeduction)
	t.Run("FixedEarningDetailToFixedEarningUsingFixedEarningDetails", testFixedEarningDetailToOneSetOpFixedEarningUsingFixedEarning)
	t.Run("SalaryStatementToEarningUsingSalaryStatement", testSalaryStatementToOneSetOpEarningUsingEarning)
	t.Run("SalaryStatementToFixedEarningUsingSalaryStatements", testSalaryStatementToOneSetOpFixedEarningUsingFixedEarning)
	t.Run("SalaryStatementToDeductionUsingSalaryStatement", testSalaryStatementToOneSetOpDeductionUsingDeduction)
	t.Run("SalaryStatementToFixedDeductionUsingSalaryStatements", testSalaryStatementToOneSetOpFixedDeductionUsingFixedDeduction)
	t.Run("SalaryStatementToEmployeeUsingSalaryStatements", testSalaryStatementToOneSetOpEmployeeUsingEmployee)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("SalaryStatementToEarningUsingSalaryStatement", testSalaryStatementToOneRemoveOpEarningUsingEarning)
	t.Run("SalaryStatementToFixedEarningUsingSalaryStatements", testSalaryStatementToOneRemoveOpFixedEarningUsingFixedEarning)
	t.Run("SalaryStatementToDeductionUsingSalaryStatement", testSalaryStatementToOneRemoveOpDeductionUsingDeduction)
	t.Run("SalaryStatementToFixedDeductionUsingSalaryStatements", testSalaryStatementToOneRemoveOpFixedDeductionUsingFixedDeduction)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("DeductionToSalaryStatementUsingSalaryStatement", testDeductionOneToOneSetOpSalaryStatementUsingSalaryStatement)
	t.Run("EarningToSalaryStatementUsingSalaryStatement", testEarningOneToOneSetOpSalaryStatementUsingSalaryStatement)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {
	t.Run("DeductionToSalaryStatementUsingSalaryStatement", testDeductionOneToOneRemoveOpSalaryStatementUsingSalaryStatement)
	t.Run("EarningToSalaryStatementUsingSalaryStatement", testEarningOneToOneRemoveOpSalaryStatementUsingSalaryStatement)
}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CompanyToEmployees", testCompanyToManyAddOpEmployees)
	t.Run("DeductionToDeductionDetailsTables", testDeductionToManyAddOpDeductionDetailsTables)
	t.Run("EarningToEarningDetails", testEarningToManyAddOpEarningDetails)
	t.Run("EmployeeToSalaryStatements", testEmployeeToManyAddOpSalaryStatements)
	t.Run("FixedDeductionToFixedDeductionDetails", testFixedDeductionToManyAddOpFixedDeductionDetails)
	t.Run("FixedDeductionToSalaryStatements", testFixedDeductionToManyAddOpSalaryStatements)
	t.Run("FixedEarningToFixedEarningDetails", testFixedEarningToManyAddOpFixedEarningDetails)
	t.Run("FixedEarningToSalaryStatements", testFixedEarningToManyAddOpSalaryStatements)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("FixedDeductionToSalaryStatements", testFixedDeductionToManySetOpSalaryStatements)
	t.Run("FixedEarningToSalaryStatements", testFixedEarningToManySetOpSalaryStatements)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("FixedDeductionToSalaryStatements", testFixedDeductionToManyRemoveOpSalaryStatements)
	t.Run("FixedEarningToSalaryStatements", testFixedEarningToManyRemoveOpSalaryStatements)
}

func TestReload(t *testing.T) {
	t.Run("Companies", testCompaniesReload)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesReload)
	t.Run("Deductions", testDeductionsReload)
	t.Run("EarningDetails", testEarningDetailsReload)
	t.Run("Earnings", testEarningsReload)
	t.Run("Employees", testEmployeesReload)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsReload)
	t.Run("FixedDeductions", testFixedDeductionsReload)
	t.Run("FixedEarningDetails", testFixedEarningDetailsReload)
	t.Run("FixedEarnings", testFixedEarningsReload)
	t.Run("SalaryStatements", testSalaryStatementsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Companies", testCompaniesReloadAll)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesReloadAll)
	t.Run("Deductions", testDeductionsReloadAll)
	t.Run("EarningDetails", testEarningDetailsReloadAll)
	t.Run("Earnings", testEarningsReloadAll)
	t.Run("Employees", testEmployeesReloadAll)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsReloadAll)
	t.Run("FixedDeductions", testFixedDeductionsReloadAll)
	t.Run("FixedEarningDetails", testFixedEarningDetailsReloadAll)
	t.Run("FixedEarnings", testFixedEarningsReloadAll)
	t.Run("SalaryStatements", testSalaryStatementsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Companies", testCompaniesSelect)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesSelect)
	t.Run("Deductions", testDeductionsSelect)
	t.Run("EarningDetails", testEarningDetailsSelect)
	t.Run("Earnings", testEarningsSelect)
	t.Run("Employees", testEmployeesSelect)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsSelect)
	t.Run("FixedDeductions", testFixedDeductionsSelect)
	t.Run("FixedEarningDetails", testFixedEarningDetailsSelect)
	t.Run("FixedEarnings", testFixedEarningsSelect)
	t.Run("SalaryStatements", testSalaryStatementsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Companies", testCompaniesUpdate)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesUpdate)
	t.Run("Deductions", testDeductionsUpdate)
	t.Run("EarningDetails", testEarningDetailsUpdate)
	t.Run("Earnings", testEarningsUpdate)
	t.Run("Employees", testEmployeesUpdate)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsUpdate)
	t.Run("FixedDeductions", testFixedDeductionsUpdate)
	t.Run("FixedEarningDetails", testFixedEarningDetailsUpdate)
	t.Run("FixedEarnings", testFixedEarningsUpdate)
	t.Run("SalaryStatements", testSalaryStatementsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Companies", testCompaniesSliceUpdateAll)
	t.Run("DeductionDetailsTables", testDeductionDetailsTablesSliceUpdateAll)
	t.Run("Deductions", testDeductionsSliceUpdateAll)
	t.Run("EarningDetails", testEarningDetailsSliceUpdateAll)
	t.Run("Earnings", testEarningsSliceUpdateAll)
	t.Run("Employees", testEmployeesSliceUpdateAll)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsSliceUpdateAll)
	t.Run("FixedDeductions", testFixedDeductionsSliceUpdateAll)
	t.Run("FixedEarningDetails", testFixedEarningDetailsSliceUpdateAll)
	t.Run("FixedEarnings", testFixedEarningsSliceUpdateAll)
	t.Run("SalaryStatements", testSalaryStatementsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
}
