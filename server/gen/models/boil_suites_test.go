// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Administrators", testAdministrators)
	t.Run("Companies", testCompanies)
	t.Run("Employees", testEmployees)
	t.Run("FixedDeductionDetails", testFixedDeductionDetails)
	t.Run("FixedDeductions", testFixedDeductions)
	t.Run("FixedEarningDetails", testFixedEarningDetails)
	t.Run("FixedEarnings", testFixedEarnings)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetails)
	t.Run("IndividualDeductions", testIndividualDeductions)
	t.Run("IndividualEarningDetails", testIndividualEarningDetails)
	t.Run("IndividualEarnings", testIndividualEarnings)
	t.Run("SalaryStatements", testSalaryStatements)
	t.Run("SchemaMigrations", testSchemaMigrations)
}

func TestDelete(t *testing.T) {
	t.Run("Administrators", testAdministratorsDelete)
	t.Run("Companies", testCompaniesDelete)
	t.Run("Employees", testEmployeesDelete)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsDelete)
	t.Run("FixedDeductions", testFixedDeductionsDelete)
	t.Run("FixedEarningDetails", testFixedEarningDetailsDelete)
	t.Run("FixedEarnings", testFixedEarningsDelete)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsDelete)
	t.Run("IndividualDeductions", testIndividualDeductionsDelete)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsDelete)
	t.Run("IndividualEarnings", testIndividualEarningsDelete)
	t.Run("SalaryStatements", testSalaryStatementsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Administrators", testAdministratorsQueryDeleteAll)
	t.Run("Companies", testCompaniesQueryDeleteAll)
	t.Run("Employees", testEmployeesQueryDeleteAll)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsQueryDeleteAll)
	t.Run("FixedDeductions", testFixedDeductionsQueryDeleteAll)
	t.Run("FixedEarningDetails", testFixedEarningDetailsQueryDeleteAll)
	t.Run("FixedEarnings", testFixedEarningsQueryDeleteAll)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsQueryDeleteAll)
	t.Run("IndividualDeductions", testIndividualDeductionsQueryDeleteAll)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsQueryDeleteAll)
	t.Run("IndividualEarnings", testIndividualEarningsQueryDeleteAll)
	t.Run("SalaryStatements", testSalaryStatementsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Administrators", testAdministratorsSliceDeleteAll)
	t.Run("Companies", testCompaniesSliceDeleteAll)
	t.Run("Employees", testEmployeesSliceDeleteAll)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsSliceDeleteAll)
	t.Run("FixedDeductions", testFixedDeductionsSliceDeleteAll)
	t.Run("FixedEarningDetails", testFixedEarningDetailsSliceDeleteAll)
	t.Run("FixedEarnings", testFixedEarningsSliceDeleteAll)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsSliceDeleteAll)
	t.Run("IndividualDeductions", testIndividualDeductionsSliceDeleteAll)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsSliceDeleteAll)
	t.Run("IndividualEarnings", testIndividualEarningsSliceDeleteAll)
	t.Run("SalaryStatements", testSalaryStatementsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Administrators", testAdministratorsExists)
	t.Run("Companies", testCompaniesExists)
	t.Run("Employees", testEmployeesExists)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsExists)
	t.Run("FixedDeductions", testFixedDeductionsExists)
	t.Run("FixedEarningDetails", testFixedEarningDetailsExists)
	t.Run("FixedEarnings", testFixedEarningsExists)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsExists)
	t.Run("IndividualDeductions", testIndividualDeductionsExists)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsExists)
	t.Run("IndividualEarnings", testIndividualEarningsExists)
	t.Run("SalaryStatements", testSalaryStatementsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
}

func TestFind(t *testing.T) {
	t.Run("Administrators", testAdministratorsFind)
	t.Run("Companies", testCompaniesFind)
	t.Run("Employees", testEmployeesFind)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsFind)
	t.Run("FixedDeductions", testFixedDeductionsFind)
	t.Run("FixedEarningDetails", testFixedEarningDetailsFind)
	t.Run("FixedEarnings", testFixedEarningsFind)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsFind)
	t.Run("IndividualDeductions", testIndividualDeductionsFind)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsFind)
	t.Run("IndividualEarnings", testIndividualEarningsFind)
	t.Run("SalaryStatements", testSalaryStatementsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
}

func TestBind(t *testing.T) {
	t.Run("Administrators", testAdministratorsBind)
	t.Run("Companies", testCompaniesBind)
	t.Run("Employees", testEmployeesBind)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsBind)
	t.Run("FixedDeductions", testFixedDeductionsBind)
	t.Run("FixedEarningDetails", testFixedEarningDetailsBind)
	t.Run("FixedEarnings", testFixedEarningsBind)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsBind)
	t.Run("IndividualDeductions", testIndividualDeductionsBind)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsBind)
	t.Run("IndividualEarnings", testIndividualEarningsBind)
	t.Run("SalaryStatements", testSalaryStatementsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
}

func TestOne(t *testing.T) {
	t.Run("Administrators", testAdministratorsOne)
	t.Run("Companies", testCompaniesOne)
	t.Run("Employees", testEmployeesOne)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsOne)
	t.Run("FixedDeductions", testFixedDeductionsOne)
	t.Run("FixedEarningDetails", testFixedEarningDetailsOne)
	t.Run("FixedEarnings", testFixedEarningsOne)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsOne)
	t.Run("IndividualDeductions", testIndividualDeductionsOne)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsOne)
	t.Run("IndividualEarnings", testIndividualEarningsOne)
	t.Run("SalaryStatements", testSalaryStatementsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
}

func TestAll(t *testing.T) {
	t.Run("Administrators", testAdministratorsAll)
	t.Run("Companies", testCompaniesAll)
	t.Run("Employees", testEmployeesAll)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsAll)
	t.Run("FixedDeductions", testFixedDeductionsAll)
	t.Run("FixedEarningDetails", testFixedEarningDetailsAll)
	t.Run("FixedEarnings", testFixedEarningsAll)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsAll)
	t.Run("IndividualDeductions", testIndividualDeductionsAll)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsAll)
	t.Run("IndividualEarnings", testIndividualEarningsAll)
	t.Run("SalaryStatements", testSalaryStatementsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
}

func TestCount(t *testing.T) {
	t.Run("Administrators", testAdministratorsCount)
	t.Run("Companies", testCompaniesCount)
	t.Run("Employees", testEmployeesCount)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsCount)
	t.Run("FixedDeductions", testFixedDeductionsCount)
	t.Run("FixedEarningDetails", testFixedEarningDetailsCount)
	t.Run("FixedEarnings", testFixedEarningsCount)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsCount)
	t.Run("IndividualDeductions", testIndividualDeductionsCount)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsCount)
	t.Run("IndividualEarnings", testIndividualEarningsCount)
	t.Run("SalaryStatements", testSalaryStatementsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Administrators", testAdministratorsHooks)
	t.Run("Companies", testCompaniesHooks)
	t.Run("Employees", testEmployeesHooks)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsHooks)
	t.Run("FixedDeductions", testFixedDeductionsHooks)
	t.Run("FixedEarningDetails", testFixedEarningDetailsHooks)
	t.Run("FixedEarnings", testFixedEarningsHooks)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsHooks)
	t.Run("IndividualDeductions", testIndividualDeductionsHooks)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsHooks)
	t.Run("IndividualEarnings", testIndividualEarningsHooks)
	t.Run("SalaryStatements", testSalaryStatementsHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Administrators", testAdministratorsInsert)
	t.Run("Administrators", testAdministratorsInsertWhitelist)
	t.Run("Companies", testCompaniesInsert)
	t.Run("Companies", testCompaniesInsertWhitelist)
	t.Run("Employees", testEmployeesInsert)
	t.Run("Employees", testEmployeesInsertWhitelist)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsInsert)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsInsertWhitelist)
	t.Run("FixedDeductions", testFixedDeductionsInsert)
	t.Run("FixedDeductions", testFixedDeductionsInsertWhitelist)
	t.Run("FixedEarningDetails", testFixedEarningDetailsInsert)
	t.Run("FixedEarningDetails", testFixedEarningDetailsInsertWhitelist)
	t.Run("FixedEarnings", testFixedEarningsInsert)
	t.Run("FixedEarnings", testFixedEarningsInsertWhitelist)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsInsert)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsInsertWhitelist)
	t.Run("IndividualDeductions", testIndividualDeductionsInsert)
	t.Run("IndividualDeductions", testIndividualDeductionsInsertWhitelist)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsInsert)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsInsertWhitelist)
	t.Run("IndividualEarnings", testIndividualEarningsInsert)
	t.Run("IndividualEarnings", testIndividualEarningsInsertWhitelist)
	t.Run("SalaryStatements", testSalaryStatementsInsert)
	t.Run("SalaryStatements", testSalaryStatementsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AdministratorToCompanyUsingCompany", testAdministratorToOneCompanyUsingCompany)
	t.Run("EmployeeToCompanyUsingCompany", testEmployeeToOneCompanyUsingCompany)
	t.Run("FixedDeductionDetailToFixedDeductionUsingFixedDeduction", testFixedDeductionDetailToOneFixedDeductionUsingFixedDeduction)
	t.Run("FixedEarningDetailToFixedEarningUsingFixedEarning", testFixedEarningDetailToOneFixedEarningUsingFixedEarning)
	t.Run("IndividualDeductionDetailToIndividualDeductionUsingIndividualDeduction", testIndividualDeductionDetailToOneIndividualDeductionUsingIndividualDeduction)
	t.Run("IndividualEarningDetailToIndividualEarningUsingIndividualEarning", testIndividualEarningDetailToOneIndividualEarningUsingIndividualEarning)
	t.Run("SalaryStatementToIndividualEarningUsingIndividualEarning", testSalaryStatementToOneIndividualEarningUsingIndividualEarning)
	t.Run("SalaryStatementToFixedEarningUsingFixedEarning", testSalaryStatementToOneFixedEarningUsingFixedEarning)
	t.Run("SalaryStatementToIndividualDeductionUsingIndividualDeduction", testSalaryStatementToOneIndividualDeductionUsingIndividualDeduction)
	t.Run("SalaryStatementToFixedDeductionUsingFixedDeduction", testSalaryStatementToOneFixedDeductionUsingFixedDeduction)
	t.Run("SalaryStatementToEmployeeUsingEmployee", testSalaryStatementToOneEmployeeUsingEmployee)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("IndividualDeductionToSalaryStatementUsingSalaryStatement", testIndividualDeductionOneToOneSalaryStatementUsingSalaryStatement)
	t.Run("IndividualEarningToSalaryStatementUsingSalaryStatement", testIndividualEarningOneToOneSalaryStatementUsingSalaryStatement)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CompanyToAdministrators", testCompanyToManyAdministrators)
	t.Run("CompanyToEmployees", testCompanyToManyEmployees)
	t.Run("EmployeeToSalaryStatements", testEmployeeToManySalaryStatements)
	t.Run("FixedDeductionToFixedDeductionDetails", testFixedDeductionToManyFixedDeductionDetails)
	t.Run("FixedDeductionToSalaryStatements", testFixedDeductionToManySalaryStatements)
	t.Run("FixedEarningToFixedEarningDetails", testFixedEarningToManyFixedEarningDetails)
	t.Run("FixedEarningToSalaryStatements", testFixedEarningToManySalaryStatements)
	t.Run("IndividualDeductionToIndividualDeductionDetails", testIndividualDeductionToManyIndividualDeductionDetails)
	t.Run("IndividualEarningToIndividualEarningDetails", testIndividualEarningToManyIndividualEarningDetails)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AdministratorToCompanyUsingAdministrators", testAdministratorToOneSetOpCompanyUsingCompany)
	t.Run("EmployeeToCompanyUsingEmployees", testEmployeeToOneSetOpCompanyUsingCompany)
	t.Run("FixedDeductionDetailToFixedDeductionUsingFixedDeductionDetails", testFixedDeductionDetailToOneSetOpFixedDeductionUsingFixedDeduction)
	t.Run("FixedEarningDetailToFixedEarningUsingFixedEarningDetails", testFixedEarningDetailToOneSetOpFixedEarningUsingFixedEarning)
	t.Run("IndividualDeductionDetailToIndividualDeductionUsingIndividualDeductionDetails", testIndividualDeductionDetailToOneSetOpIndividualDeductionUsingIndividualDeduction)
	t.Run("IndividualEarningDetailToIndividualEarningUsingIndividualEarningDetails", testIndividualEarningDetailToOneSetOpIndividualEarningUsingIndividualEarning)
	t.Run("SalaryStatementToIndividualEarningUsingSalaryStatement", testSalaryStatementToOneSetOpIndividualEarningUsingIndividualEarning)
	t.Run("SalaryStatementToFixedEarningUsingSalaryStatements", testSalaryStatementToOneSetOpFixedEarningUsingFixedEarning)
	t.Run("SalaryStatementToIndividualDeductionUsingSalaryStatement", testSalaryStatementToOneSetOpIndividualDeductionUsingIndividualDeduction)
	t.Run("SalaryStatementToFixedDeductionUsingSalaryStatements", testSalaryStatementToOneSetOpFixedDeductionUsingFixedDeduction)
	t.Run("SalaryStatementToEmployeeUsingSalaryStatements", testSalaryStatementToOneSetOpEmployeeUsingEmployee)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("SalaryStatementToIndividualEarningUsingSalaryStatement", testSalaryStatementToOneRemoveOpIndividualEarningUsingIndividualEarning)
	t.Run("SalaryStatementToFixedEarningUsingSalaryStatements", testSalaryStatementToOneRemoveOpFixedEarningUsingFixedEarning)
	t.Run("SalaryStatementToIndividualDeductionUsingSalaryStatement", testSalaryStatementToOneRemoveOpIndividualDeductionUsingIndividualDeduction)
	t.Run("SalaryStatementToFixedDeductionUsingSalaryStatements", testSalaryStatementToOneRemoveOpFixedDeductionUsingFixedDeduction)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("IndividualDeductionToSalaryStatementUsingSalaryStatement", testIndividualDeductionOneToOneSetOpSalaryStatementUsingSalaryStatement)
	t.Run("IndividualEarningToSalaryStatementUsingSalaryStatement", testIndividualEarningOneToOneSetOpSalaryStatementUsingSalaryStatement)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {
	t.Run("IndividualDeductionToSalaryStatementUsingSalaryStatement", testIndividualDeductionOneToOneRemoveOpSalaryStatementUsingSalaryStatement)
	t.Run("IndividualEarningToSalaryStatementUsingSalaryStatement", testIndividualEarningOneToOneRemoveOpSalaryStatementUsingSalaryStatement)
}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CompanyToAdministrators", testCompanyToManyAddOpAdministrators)
	t.Run("CompanyToEmployees", testCompanyToManyAddOpEmployees)
	t.Run("EmployeeToSalaryStatements", testEmployeeToManyAddOpSalaryStatements)
	t.Run("FixedDeductionToFixedDeductionDetails", testFixedDeductionToManyAddOpFixedDeductionDetails)
	t.Run("FixedDeductionToSalaryStatements", testFixedDeductionToManyAddOpSalaryStatements)
	t.Run("FixedEarningToFixedEarningDetails", testFixedEarningToManyAddOpFixedEarningDetails)
	t.Run("FixedEarningToSalaryStatements", testFixedEarningToManyAddOpSalaryStatements)
	t.Run("IndividualDeductionToIndividualDeductionDetails", testIndividualDeductionToManyAddOpIndividualDeductionDetails)
	t.Run("IndividualEarningToIndividualEarningDetails", testIndividualEarningToManyAddOpIndividualEarningDetails)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("FixedDeductionToSalaryStatements", testFixedDeductionToManySetOpSalaryStatements)
	t.Run("FixedEarningToSalaryStatements", testFixedEarningToManySetOpSalaryStatements)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("FixedDeductionToSalaryStatements", testFixedDeductionToManyRemoveOpSalaryStatements)
	t.Run("FixedEarningToSalaryStatements", testFixedEarningToManyRemoveOpSalaryStatements)
}

func TestReload(t *testing.T) {
	t.Run("Administrators", testAdministratorsReload)
	t.Run("Companies", testCompaniesReload)
	t.Run("Employees", testEmployeesReload)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsReload)
	t.Run("FixedDeductions", testFixedDeductionsReload)
	t.Run("FixedEarningDetails", testFixedEarningDetailsReload)
	t.Run("FixedEarnings", testFixedEarningsReload)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsReload)
	t.Run("IndividualDeductions", testIndividualDeductionsReload)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsReload)
	t.Run("IndividualEarnings", testIndividualEarningsReload)
	t.Run("SalaryStatements", testSalaryStatementsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Administrators", testAdministratorsReloadAll)
	t.Run("Companies", testCompaniesReloadAll)
	t.Run("Employees", testEmployeesReloadAll)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsReloadAll)
	t.Run("FixedDeductions", testFixedDeductionsReloadAll)
	t.Run("FixedEarningDetails", testFixedEarningDetailsReloadAll)
	t.Run("FixedEarnings", testFixedEarningsReloadAll)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsReloadAll)
	t.Run("IndividualDeductions", testIndividualDeductionsReloadAll)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsReloadAll)
	t.Run("IndividualEarnings", testIndividualEarningsReloadAll)
	t.Run("SalaryStatements", testSalaryStatementsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Administrators", testAdministratorsSelect)
	t.Run("Companies", testCompaniesSelect)
	t.Run("Employees", testEmployeesSelect)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsSelect)
	t.Run("FixedDeductions", testFixedDeductionsSelect)
	t.Run("FixedEarningDetails", testFixedEarningDetailsSelect)
	t.Run("FixedEarnings", testFixedEarningsSelect)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsSelect)
	t.Run("IndividualDeductions", testIndividualDeductionsSelect)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsSelect)
	t.Run("IndividualEarnings", testIndividualEarningsSelect)
	t.Run("SalaryStatements", testSalaryStatementsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Administrators", testAdministratorsUpdate)
	t.Run("Companies", testCompaniesUpdate)
	t.Run("Employees", testEmployeesUpdate)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsUpdate)
	t.Run("FixedDeductions", testFixedDeductionsUpdate)
	t.Run("FixedEarningDetails", testFixedEarningDetailsUpdate)
	t.Run("FixedEarnings", testFixedEarningsUpdate)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsUpdate)
	t.Run("IndividualDeductions", testIndividualDeductionsUpdate)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsUpdate)
	t.Run("IndividualEarnings", testIndividualEarningsUpdate)
	t.Run("SalaryStatements", testSalaryStatementsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Administrators", testAdministratorsSliceUpdateAll)
	t.Run("Companies", testCompaniesSliceUpdateAll)
	t.Run("Employees", testEmployeesSliceUpdateAll)
	t.Run("FixedDeductionDetails", testFixedDeductionDetailsSliceUpdateAll)
	t.Run("FixedDeductions", testFixedDeductionsSliceUpdateAll)
	t.Run("FixedEarningDetails", testFixedEarningDetailsSliceUpdateAll)
	t.Run("FixedEarnings", testFixedEarningsSliceUpdateAll)
	t.Run("IndividualDeductionDetails", testIndividualDeductionDetailsSliceUpdateAll)
	t.Run("IndividualDeductions", testIndividualDeductionsSliceUpdateAll)
	t.Run("IndividualEarningDetails", testIndividualEarningDetailsSliceUpdateAll)
	t.Run("IndividualEarnings", testIndividualEarningsSliceUpdateAll)
	t.Run("SalaryStatements", testSalaryStatementsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
}
