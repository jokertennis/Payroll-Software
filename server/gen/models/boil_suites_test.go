// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Administrators", testAdministrators)
	t.Run("Companies", testCompanies)
	t.Run("DeductionDetails", testDeductionDetails)
	t.Run("Deductions", testDeductions)
	t.Run("EarningDetails", testEarningDetails)
	t.Run("Earnings", testEarnings)
	t.Run("Employees", testEmployees)
	t.Run("SalaryStatements", testSalaryStatements)
	t.Run("SchemaMigrations", testSchemaMigrations)
}

func TestDelete(t *testing.T) {
	t.Run("Administrators", testAdministratorsDelete)
	t.Run("Companies", testCompaniesDelete)
	t.Run("DeductionDetails", testDeductionDetailsDelete)
	t.Run("Deductions", testDeductionsDelete)
	t.Run("EarningDetails", testEarningDetailsDelete)
	t.Run("Earnings", testEarningsDelete)
	t.Run("Employees", testEmployeesDelete)
	t.Run("SalaryStatements", testSalaryStatementsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Administrators", testAdministratorsQueryDeleteAll)
	t.Run("Companies", testCompaniesQueryDeleteAll)
	t.Run("DeductionDetails", testDeductionDetailsQueryDeleteAll)
	t.Run("Deductions", testDeductionsQueryDeleteAll)
	t.Run("EarningDetails", testEarningDetailsQueryDeleteAll)
	t.Run("Earnings", testEarningsQueryDeleteAll)
	t.Run("Employees", testEmployeesQueryDeleteAll)
	t.Run("SalaryStatements", testSalaryStatementsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Administrators", testAdministratorsSliceDeleteAll)
	t.Run("Companies", testCompaniesSliceDeleteAll)
	t.Run("DeductionDetails", testDeductionDetailsSliceDeleteAll)
	t.Run("Deductions", testDeductionsSliceDeleteAll)
	t.Run("EarningDetails", testEarningDetailsSliceDeleteAll)
	t.Run("Earnings", testEarningsSliceDeleteAll)
	t.Run("Employees", testEmployeesSliceDeleteAll)
	t.Run("SalaryStatements", testSalaryStatementsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Administrators", testAdministratorsExists)
	t.Run("Companies", testCompaniesExists)
	t.Run("DeductionDetails", testDeductionDetailsExists)
	t.Run("Deductions", testDeductionsExists)
	t.Run("EarningDetails", testEarningDetailsExists)
	t.Run("Earnings", testEarningsExists)
	t.Run("Employees", testEmployeesExists)
	t.Run("SalaryStatements", testSalaryStatementsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
}

func TestFind(t *testing.T) {
	t.Run("Administrators", testAdministratorsFind)
	t.Run("Companies", testCompaniesFind)
	t.Run("DeductionDetails", testDeductionDetailsFind)
	t.Run("Deductions", testDeductionsFind)
	t.Run("EarningDetails", testEarningDetailsFind)
	t.Run("Earnings", testEarningsFind)
	t.Run("Employees", testEmployeesFind)
	t.Run("SalaryStatements", testSalaryStatementsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
}

func TestBind(t *testing.T) {
	t.Run("Administrators", testAdministratorsBind)
	t.Run("Companies", testCompaniesBind)
	t.Run("DeductionDetails", testDeductionDetailsBind)
	t.Run("Deductions", testDeductionsBind)
	t.Run("EarningDetails", testEarningDetailsBind)
	t.Run("Earnings", testEarningsBind)
	t.Run("Employees", testEmployeesBind)
	t.Run("SalaryStatements", testSalaryStatementsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
}

func TestOne(t *testing.T) {
	t.Run("Administrators", testAdministratorsOne)
	t.Run("Companies", testCompaniesOne)
	t.Run("DeductionDetails", testDeductionDetailsOne)
	t.Run("Deductions", testDeductionsOne)
	t.Run("EarningDetails", testEarningDetailsOne)
	t.Run("Earnings", testEarningsOne)
	t.Run("Employees", testEmployeesOne)
	t.Run("SalaryStatements", testSalaryStatementsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
}

func TestAll(t *testing.T) {
	t.Run("Administrators", testAdministratorsAll)
	t.Run("Companies", testCompaniesAll)
	t.Run("DeductionDetails", testDeductionDetailsAll)
	t.Run("Deductions", testDeductionsAll)
	t.Run("EarningDetails", testEarningDetailsAll)
	t.Run("Earnings", testEarningsAll)
	t.Run("Employees", testEmployeesAll)
	t.Run("SalaryStatements", testSalaryStatementsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
}

func TestCount(t *testing.T) {
	t.Run("Administrators", testAdministratorsCount)
	t.Run("Companies", testCompaniesCount)
	t.Run("DeductionDetails", testDeductionDetailsCount)
	t.Run("Deductions", testDeductionsCount)
	t.Run("EarningDetails", testEarningDetailsCount)
	t.Run("Earnings", testEarningsCount)
	t.Run("Employees", testEmployeesCount)
	t.Run("SalaryStatements", testSalaryStatementsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Administrators", testAdministratorsHooks)
	t.Run("Companies", testCompaniesHooks)
	t.Run("DeductionDetails", testDeductionDetailsHooks)
	t.Run("Deductions", testDeductionsHooks)
	t.Run("EarningDetails", testEarningDetailsHooks)
	t.Run("Earnings", testEarningsHooks)
	t.Run("Employees", testEmployeesHooks)
	t.Run("SalaryStatements", testSalaryStatementsHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Administrators", testAdministratorsInsert)
	t.Run("Administrators", testAdministratorsInsertWhitelist)
	t.Run("Companies", testCompaniesInsert)
	t.Run("Companies", testCompaniesInsertWhitelist)
	t.Run("DeductionDetails", testDeductionDetailsInsert)
	t.Run("DeductionDetails", testDeductionDetailsInsertWhitelist)
	t.Run("Deductions", testDeductionsInsert)
	t.Run("Deductions", testDeductionsInsertWhitelist)
	t.Run("EarningDetails", testEarningDetailsInsert)
	t.Run("EarningDetails", testEarningDetailsInsertWhitelist)
	t.Run("Earnings", testEarningsInsert)
	t.Run("Earnings", testEarningsInsertWhitelist)
	t.Run("Employees", testEmployeesInsert)
	t.Run("Employees", testEmployeesInsertWhitelist)
	t.Run("SalaryStatements", testSalaryStatementsInsert)
	t.Run("SalaryStatements", testSalaryStatementsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AdministratorToCompanyUsingCompany", testAdministratorToOneCompanyUsingCompany)
	t.Run("DeductionDetailToDeductionUsingDeduction", testDeductionDetailToOneDeductionUsingDeduction)
	t.Run("EarningDetailToEarningUsingEarning", testEarningDetailToOneEarningUsingEarning)
	t.Run("EmployeeToCompanyUsingCompany", testEmployeeToOneCompanyUsingCompany)
	t.Run("SalaryStatementToEarningUsingEarning", testSalaryStatementToOneEarningUsingEarning)
	t.Run("SalaryStatementToDeductionUsingDeduction", testSalaryStatementToOneDeductionUsingDeduction)
	t.Run("SalaryStatementToEmployeeUsingEmployee", testSalaryStatementToOneEmployeeUsingEmployee)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CompanyToAdministrators", testCompanyToManyAdministrators)
	t.Run("CompanyToEmployees", testCompanyToManyEmployees)
	t.Run("DeductionToDeductionDetails", testDeductionToManyDeductionDetails)
	t.Run("DeductionToSalaryStatements", testDeductionToManySalaryStatements)
	t.Run("EarningToEarningDetails", testEarningToManyEarningDetails)
	t.Run("EarningToSalaryStatements", testEarningToManySalaryStatements)
	t.Run("EmployeeToSalaryStatements", testEmployeeToManySalaryStatements)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AdministratorToCompanyUsingAdministrators", testAdministratorToOneSetOpCompanyUsingCompany)
	t.Run("DeductionDetailToDeductionUsingDeductionDetails", testDeductionDetailToOneSetOpDeductionUsingDeduction)
	t.Run("EarningDetailToEarningUsingEarningDetails", testEarningDetailToOneSetOpEarningUsingEarning)
	t.Run("EmployeeToCompanyUsingEmployees", testEmployeeToOneSetOpCompanyUsingCompany)
	t.Run("SalaryStatementToEarningUsingSalaryStatements", testSalaryStatementToOneSetOpEarningUsingEarning)
	t.Run("SalaryStatementToDeductionUsingSalaryStatements", testSalaryStatementToOneSetOpDeductionUsingDeduction)
	t.Run("SalaryStatementToEmployeeUsingSalaryStatements", testSalaryStatementToOneSetOpEmployeeUsingEmployee)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("SalaryStatementToEarningUsingSalaryStatements", testSalaryStatementToOneRemoveOpEarningUsingEarning)
	t.Run("SalaryStatementToDeductionUsingSalaryStatements", testSalaryStatementToOneRemoveOpDeductionUsingDeduction)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CompanyToAdministrators", testCompanyToManyAddOpAdministrators)
	t.Run("CompanyToEmployees", testCompanyToManyAddOpEmployees)
	t.Run("DeductionToDeductionDetails", testDeductionToManyAddOpDeductionDetails)
	t.Run("DeductionToSalaryStatements", testDeductionToManyAddOpSalaryStatements)
	t.Run("EarningToEarningDetails", testEarningToManyAddOpEarningDetails)
	t.Run("EarningToSalaryStatements", testEarningToManyAddOpSalaryStatements)
	t.Run("EmployeeToSalaryStatements", testEmployeeToManyAddOpSalaryStatements)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("DeductionToSalaryStatements", testDeductionToManySetOpSalaryStatements)
	t.Run("EarningToSalaryStatements", testEarningToManySetOpSalaryStatements)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("DeductionToSalaryStatements", testDeductionToManyRemoveOpSalaryStatements)
	t.Run("EarningToSalaryStatements", testEarningToManyRemoveOpSalaryStatements)
}

func TestReload(t *testing.T) {
	t.Run("Administrators", testAdministratorsReload)
	t.Run("Companies", testCompaniesReload)
	t.Run("DeductionDetails", testDeductionDetailsReload)
	t.Run("Deductions", testDeductionsReload)
	t.Run("EarningDetails", testEarningDetailsReload)
	t.Run("Earnings", testEarningsReload)
	t.Run("Employees", testEmployeesReload)
	t.Run("SalaryStatements", testSalaryStatementsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Administrators", testAdministratorsReloadAll)
	t.Run("Companies", testCompaniesReloadAll)
	t.Run("DeductionDetails", testDeductionDetailsReloadAll)
	t.Run("Deductions", testDeductionsReloadAll)
	t.Run("EarningDetails", testEarningDetailsReloadAll)
	t.Run("Earnings", testEarningsReloadAll)
	t.Run("Employees", testEmployeesReloadAll)
	t.Run("SalaryStatements", testSalaryStatementsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Administrators", testAdministratorsSelect)
	t.Run("Companies", testCompaniesSelect)
	t.Run("DeductionDetails", testDeductionDetailsSelect)
	t.Run("Deductions", testDeductionsSelect)
	t.Run("EarningDetails", testEarningDetailsSelect)
	t.Run("Earnings", testEarningsSelect)
	t.Run("Employees", testEmployeesSelect)
	t.Run("SalaryStatements", testSalaryStatementsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Administrators", testAdministratorsUpdate)
	t.Run("Companies", testCompaniesUpdate)
	t.Run("DeductionDetails", testDeductionDetailsUpdate)
	t.Run("Deductions", testDeductionsUpdate)
	t.Run("EarningDetails", testEarningDetailsUpdate)
	t.Run("Earnings", testEarningsUpdate)
	t.Run("Employees", testEmployeesUpdate)
	t.Run("SalaryStatements", testSalaryStatementsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Administrators", testAdministratorsSliceUpdateAll)
	t.Run("Companies", testCompaniesSliceUpdateAll)
	t.Run("DeductionDetails", testDeductionDetailsSliceUpdateAll)
	t.Run("Deductions", testDeductionsSliceUpdateAll)
	t.Run("EarningDetails", testEarningDetailsSliceUpdateAll)
	t.Run("Earnings", testEarningsSliceUpdateAll)
	t.Run("Employees", testEmployeesSliceUpdateAll)
	t.Run("SalaryStatements", testSalaryStatementsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
}
