// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// IndividualEarningDetail is an object representing the database table.
type IndividualEarningDetail struct {
	ID                  uint32    `boil:"id" json:"id" toml:"id" yaml:"id"`
	IndividualEarningID uint32    `boil:"individual_earning_id" json:"individual_earning_id" toml:"individual_earning_id" yaml:"individual_earning_id"`
	Nominal             string    `boil:"nominal" json:"nominal" toml:"nominal" yaml:"nominal"`
	Amount              int       `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	CreatedAt           time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *individualEarningDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L individualEarningDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IndividualEarningDetailColumns = struct {
	ID                  string
	IndividualEarningID string
	Nominal             string
	Amount              string
	CreatedAt           string
	UpdatedAt           string
}{
	ID:                  "id",
	IndividualEarningID: "individual_earning_id",
	Nominal:             "nominal",
	Amount:              "amount",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
}

var IndividualEarningDetailTableColumns = struct {
	ID                  string
	IndividualEarningID string
	Nominal             string
	Amount              string
	CreatedAt           string
	UpdatedAt           string
}{
	ID:                  "individual_earning_details.id",
	IndividualEarningID: "individual_earning_details.individual_earning_id",
	Nominal:             "individual_earning_details.nominal",
	Amount:              "individual_earning_details.amount",
	CreatedAt:           "individual_earning_details.created_at",
	UpdatedAt:           "individual_earning_details.updated_at",
}

// Generated where

var IndividualEarningDetailWhere = struct {
	ID                  whereHelperuint32
	IndividualEarningID whereHelperuint32
	Nominal             whereHelperstring
	Amount              whereHelperint
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
}{
	ID:                  whereHelperuint32{field: "`individual_earning_details`.`id`"},
	IndividualEarningID: whereHelperuint32{field: "`individual_earning_details`.`individual_earning_id`"},
	Nominal:             whereHelperstring{field: "`individual_earning_details`.`nominal`"},
	Amount:              whereHelperint{field: "`individual_earning_details`.`amount`"},
	CreatedAt:           whereHelpertime_Time{field: "`individual_earning_details`.`created_at`"},
	UpdatedAt:           whereHelpertime_Time{field: "`individual_earning_details`.`updated_at`"},
}

// IndividualEarningDetailRels is where relationship names are stored.
var IndividualEarningDetailRels = struct {
	IndividualEarning string
}{
	IndividualEarning: "IndividualEarning",
}

// individualEarningDetailR is where relationships are stored.
type individualEarningDetailR struct {
	IndividualEarning *IndividualEarning `boil:"IndividualEarning" json:"IndividualEarning" toml:"IndividualEarning" yaml:"IndividualEarning"`
}

// NewStruct creates a new relationship struct
func (*individualEarningDetailR) NewStruct() *individualEarningDetailR {
	return &individualEarningDetailR{}
}

func (r *individualEarningDetailR) GetIndividualEarning() *IndividualEarning {
	if r == nil {
		return nil
	}
	return r.IndividualEarning
}

// individualEarningDetailL is where Load methods for each relationship are stored.
type individualEarningDetailL struct{}

var (
	individualEarningDetailAllColumns            = []string{"id", "individual_earning_id", "nominal", "amount", "created_at", "updated_at"}
	individualEarningDetailColumnsWithoutDefault = []string{"individual_earning_id", "nominal", "amount", "created_at", "updated_at"}
	individualEarningDetailColumnsWithDefault    = []string{"id"}
	individualEarningDetailPrimaryKeyColumns     = []string{"id"}
	individualEarningDetailGeneratedColumns      = []string{}
)

type (
	// IndividualEarningDetailSlice is an alias for a slice of pointers to IndividualEarningDetail.
	// This should almost always be used instead of []IndividualEarningDetail.
	IndividualEarningDetailSlice []*IndividualEarningDetail
	// IndividualEarningDetailHook is the signature for custom IndividualEarningDetail hook methods
	IndividualEarningDetailHook func(context.Context, boil.ContextExecutor, *IndividualEarningDetail) error

	individualEarningDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	individualEarningDetailType                 = reflect.TypeOf(&IndividualEarningDetail{})
	individualEarningDetailMapping              = queries.MakeStructMapping(individualEarningDetailType)
	individualEarningDetailPrimaryKeyMapping, _ = queries.BindMapping(individualEarningDetailType, individualEarningDetailMapping, individualEarningDetailPrimaryKeyColumns)
	individualEarningDetailInsertCacheMut       sync.RWMutex
	individualEarningDetailInsertCache          = make(map[string]insertCache)
	individualEarningDetailUpdateCacheMut       sync.RWMutex
	individualEarningDetailUpdateCache          = make(map[string]updateCache)
	individualEarningDetailUpsertCacheMut       sync.RWMutex
	individualEarningDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var individualEarningDetailAfterSelectHooks []IndividualEarningDetailHook

var individualEarningDetailBeforeInsertHooks []IndividualEarningDetailHook
var individualEarningDetailAfterInsertHooks []IndividualEarningDetailHook

var individualEarningDetailBeforeUpdateHooks []IndividualEarningDetailHook
var individualEarningDetailAfterUpdateHooks []IndividualEarningDetailHook

var individualEarningDetailBeforeDeleteHooks []IndividualEarningDetailHook
var individualEarningDetailAfterDeleteHooks []IndividualEarningDetailHook

var individualEarningDetailBeforeUpsertHooks []IndividualEarningDetailHook
var individualEarningDetailAfterUpsertHooks []IndividualEarningDetailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IndividualEarningDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IndividualEarningDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IndividualEarningDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IndividualEarningDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IndividualEarningDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IndividualEarningDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IndividualEarningDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IndividualEarningDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IndividualEarningDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range individualEarningDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIndividualEarningDetailHook registers your hook function for all future operations.
func AddIndividualEarningDetailHook(hookPoint boil.HookPoint, individualEarningDetailHook IndividualEarningDetailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		individualEarningDetailAfterSelectHooks = append(individualEarningDetailAfterSelectHooks, individualEarningDetailHook)
	case boil.BeforeInsertHook:
		individualEarningDetailBeforeInsertHooks = append(individualEarningDetailBeforeInsertHooks, individualEarningDetailHook)
	case boil.AfterInsertHook:
		individualEarningDetailAfterInsertHooks = append(individualEarningDetailAfterInsertHooks, individualEarningDetailHook)
	case boil.BeforeUpdateHook:
		individualEarningDetailBeforeUpdateHooks = append(individualEarningDetailBeforeUpdateHooks, individualEarningDetailHook)
	case boil.AfterUpdateHook:
		individualEarningDetailAfterUpdateHooks = append(individualEarningDetailAfterUpdateHooks, individualEarningDetailHook)
	case boil.BeforeDeleteHook:
		individualEarningDetailBeforeDeleteHooks = append(individualEarningDetailBeforeDeleteHooks, individualEarningDetailHook)
	case boil.AfterDeleteHook:
		individualEarningDetailAfterDeleteHooks = append(individualEarningDetailAfterDeleteHooks, individualEarningDetailHook)
	case boil.BeforeUpsertHook:
		individualEarningDetailBeforeUpsertHooks = append(individualEarningDetailBeforeUpsertHooks, individualEarningDetailHook)
	case boil.AfterUpsertHook:
		individualEarningDetailAfterUpsertHooks = append(individualEarningDetailAfterUpsertHooks, individualEarningDetailHook)
	}
}

// One returns a single individualEarningDetail record from the query.
func (q individualEarningDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IndividualEarningDetail, error) {
	o := &IndividualEarningDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for individual_earning_details")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all IndividualEarningDetail records from the query.
func (q individualEarningDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (IndividualEarningDetailSlice, error) {
	var o []*IndividualEarningDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IndividualEarningDetail slice")
	}

	if len(individualEarningDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all IndividualEarningDetail records in the query.
func (q individualEarningDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count individual_earning_details rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q individualEarningDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if individual_earning_details exists")
	}

	return count > 0, nil
}

// IndividualEarning pointed to by the foreign key.
func (o *IndividualEarningDetail) IndividualEarning(mods ...qm.QueryMod) individualEarningQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.IndividualEarningID),
	}

	queryMods = append(queryMods, mods...)

	return IndividualEarnings(queryMods...)
}

// LoadIndividualEarning allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (individualEarningDetailL) LoadIndividualEarning(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIndividualEarningDetail interface{}, mods queries.Applicator) error {
	var slice []*IndividualEarningDetail
	var object *IndividualEarningDetail

	if singular {
		var ok bool
		object, ok = maybeIndividualEarningDetail.(*IndividualEarningDetail)
		if !ok {
			object = new(IndividualEarningDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeIndividualEarningDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeIndividualEarningDetail))
			}
		}
	} else {
		s, ok := maybeIndividualEarningDetail.(*[]*IndividualEarningDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeIndividualEarningDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeIndividualEarningDetail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &individualEarningDetailR{}
		}
		args = append(args, object.IndividualEarningID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &individualEarningDetailR{}
			}

			for _, a := range args {
				if a == obj.IndividualEarningID {
					continue Outer
				}
			}

			args = append(args, obj.IndividualEarningID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`individual_earnings`),
		qm.WhereIn(`individual_earnings.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load IndividualEarning")
	}

	var resultSlice []*IndividualEarning
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice IndividualEarning")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for individual_earnings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for individual_earnings")
	}

	if len(individualEarningAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IndividualEarning = foreign
		if foreign.R == nil {
			foreign.R = &individualEarningR{}
		}
		foreign.R.IndividualEarningDetails = append(foreign.R.IndividualEarningDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IndividualEarningID == foreign.ID {
				local.R.IndividualEarning = foreign
				if foreign.R == nil {
					foreign.R = &individualEarningR{}
				}
				foreign.R.IndividualEarningDetails = append(foreign.R.IndividualEarningDetails, local)
				break
			}
		}
	}

	return nil
}

// SetIndividualEarning of the individualEarningDetail to the related item.
// Sets o.R.IndividualEarning to related.
// Adds o to related.R.IndividualEarningDetails.
func (o *IndividualEarningDetail) SetIndividualEarning(ctx context.Context, exec boil.ContextExecutor, insert bool, related *IndividualEarning) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `individual_earning_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"individual_earning_id"}),
		strmangle.WhereClause("`", "`", 0, individualEarningDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IndividualEarningID = related.ID
	if o.R == nil {
		o.R = &individualEarningDetailR{
			IndividualEarning: related,
		}
	} else {
		o.R.IndividualEarning = related
	}

	if related.R == nil {
		related.R = &individualEarningR{
			IndividualEarningDetails: IndividualEarningDetailSlice{o},
		}
	} else {
		related.R.IndividualEarningDetails = append(related.R.IndividualEarningDetails, o)
	}

	return nil
}

// IndividualEarningDetails retrieves all the records using an executor.
func IndividualEarningDetails(mods ...qm.QueryMod) individualEarningDetailQuery {
	mods = append(mods, qm.From("`individual_earning_details`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`individual_earning_details`.*"})
	}

	return individualEarningDetailQuery{q}
}

// FindIndividualEarningDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIndividualEarningDetail(ctx context.Context, exec boil.ContextExecutor, iD uint32, selectCols ...string) (*IndividualEarningDetail, error) {
	individualEarningDetailObj := &IndividualEarningDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `individual_earning_details` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, individualEarningDetailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from individual_earning_details")
	}

	if err = individualEarningDetailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return individualEarningDetailObj, err
	}

	return individualEarningDetailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IndividualEarningDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no individual_earning_details provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(individualEarningDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	individualEarningDetailInsertCacheMut.RLock()
	cache, cached := individualEarningDetailInsertCache[key]
	individualEarningDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			individualEarningDetailAllColumns,
			individualEarningDetailColumnsWithDefault,
			individualEarningDetailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(individualEarningDetailType, individualEarningDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(individualEarningDetailType, individualEarningDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `individual_earning_details` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `individual_earning_details` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `individual_earning_details` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, individualEarningDetailPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into individual_earning_details")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint32(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == individualEarningDetailMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for individual_earning_details")
	}

CacheNoHooks:
	if !cached {
		individualEarningDetailInsertCacheMut.Lock()
		individualEarningDetailInsertCache[key] = cache
		individualEarningDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the IndividualEarningDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IndividualEarningDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	individualEarningDetailUpdateCacheMut.RLock()
	cache, cached := individualEarningDetailUpdateCache[key]
	individualEarningDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			individualEarningDetailAllColumns,
			individualEarningDetailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update individual_earning_details, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `individual_earning_details` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, individualEarningDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(individualEarningDetailType, individualEarningDetailMapping, append(wl, individualEarningDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update individual_earning_details row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for individual_earning_details")
	}

	if !cached {
		individualEarningDetailUpdateCacheMut.Lock()
		individualEarningDetailUpdateCache[key] = cache
		individualEarningDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q individualEarningDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for individual_earning_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for individual_earning_details")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IndividualEarningDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), individualEarningDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `individual_earning_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, individualEarningDetailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in individualEarningDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all individualEarningDetail")
	}
	return rowsAff, nil
}

var mySQLIndividualEarningDetailUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IndividualEarningDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no individual_earning_details provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(individualEarningDetailColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLIndividualEarningDetailUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	individualEarningDetailUpsertCacheMut.RLock()
	cache, cached := individualEarningDetailUpsertCache[key]
	individualEarningDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			individualEarningDetailAllColumns,
			individualEarningDetailColumnsWithDefault,
			individualEarningDetailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			individualEarningDetailAllColumns,
			individualEarningDetailPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert individual_earning_details, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`individual_earning_details`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `individual_earning_details` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(individualEarningDetailType, individualEarningDetailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(individualEarningDetailType, individualEarningDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for individual_earning_details")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint32(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == individualEarningDetailMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(individualEarningDetailType, individualEarningDetailMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for individual_earning_details")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for individual_earning_details")
	}

CacheNoHooks:
	if !cached {
		individualEarningDetailUpsertCacheMut.Lock()
		individualEarningDetailUpsertCache[key] = cache
		individualEarningDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single IndividualEarningDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IndividualEarningDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IndividualEarningDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), individualEarningDetailPrimaryKeyMapping)
	sql := "DELETE FROM `individual_earning_details` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from individual_earning_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for individual_earning_details")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q individualEarningDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no individualEarningDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from individual_earning_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for individual_earning_details")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IndividualEarningDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(individualEarningDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), individualEarningDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `individual_earning_details` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, individualEarningDetailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from individualEarningDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for individual_earning_details")
	}

	if len(individualEarningDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IndividualEarningDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIndividualEarningDetail(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IndividualEarningDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IndividualEarningDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), individualEarningDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `individual_earning_details`.* FROM `individual_earning_details` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, individualEarningDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IndividualEarningDetailSlice")
	}

	*o = slice

	return nil
}

// IndividualEarningDetailExists checks if the IndividualEarningDetail row exists.
func IndividualEarningDetailExists(ctx context.Context, exec boil.ContextExecutor, iD uint32) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `individual_earning_details` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if individual_earning_details exists")
	}

	return exists, nil
}

// Exists checks if the IndividualEarningDetail row exists.
func (o *IndividualEarningDetail) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return IndividualEarningDetailExists(ctx, exec, o.ID)
}
