// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalaryStatementRequest salary statement request
//
// swagger:model salaryStatementRequest
type SalaryStatementRequest struct {

	// amount of deduction
	// Required: true
	AmountOfDeduction *int32 `json:"amount_of_deduction"`

	// amount of earning
	// Required: true
	AmountOfEarning *int32 `json:"amount_of_earning"`

	// deduction details
	// Required: true
	DeductionDetails []*SalaryStatementRequestDeductionDetailsItems0 `json:"deduction_details"`

	// earning and deduction type
	// Required: true
	EarningAndDeductionType *string `json:"earning_and_deduction_type"`

	// earning details
	// Required: true
	EarningDetails []*SalaryStatementRequestEarningDetailsItems0 `json:"earning_details"`

	// mailaddress of employee
	// Required: true
	MailaddressOfEmployee *string `json:"mailaddressOfEmployee"`

	// nominal
	// Required: true
	Nominal *string `json:"nominal"`

	// nominal of deduction
	// Required: true
	NominalOfDeduction *string `json:"nominal_of_deduction"`

	// nominal of earning
	// Required: true
	NominalOfEarning *string `json:"nominal_of_earning"`

	// payday
	// Required: true
	// Format: date-time
	Payday *strfmt.DateTime `json:"payday"`

	// target period
	// Required: true
	TargetPeriod *string `json:"target_period"`
}

// Validate validates this salary statement request
func (m *SalaryStatementRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountOfDeduction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmountOfEarning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeductionDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEarningAndDeductionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEarningDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMailaddressOfEmployee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNominal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNominalOfDeduction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNominalOfEarning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPeriod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalaryStatementRequest) validateAmountOfDeduction(formats strfmt.Registry) error {

	if err := validate.Required("amount_of_deduction", "body", m.AmountOfDeduction); err != nil {
		return err
	}

	return nil
}

func (m *SalaryStatementRequest) validateAmountOfEarning(formats strfmt.Registry) error {

	if err := validate.Required("amount_of_earning", "body", m.AmountOfEarning); err != nil {
		return err
	}

	return nil
}

func (m *SalaryStatementRequest) validateDeductionDetails(formats strfmt.Registry) error {

	if err := validate.Required("deduction_details", "body", m.DeductionDetails); err != nil {
		return err
	}

	for i := 0; i < len(m.DeductionDetails); i++ {
		if swag.IsZero(m.DeductionDetails[i]) { // not required
			continue
		}

		if m.DeductionDetails[i] != nil {
			if err := m.DeductionDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deduction_details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deduction_details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalaryStatementRequest) validateEarningAndDeductionType(formats strfmt.Registry) error {

	if err := validate.Required("earning_and_deduction_type", "body", m.EarningAndDeductionType); err != nil {
		return err
	}

	return nil
}

func (m *SalaryStatementRequest) validateEarningDetails(formats strfmt.Registry) error {

	if err := validate.Required("earning_details", "body", m.EarningDetails); err != nil {
		return err
	}

	for i := 0; i < len(m.EarningDetails); i++ {
		if swag.IsZero(m.EarningDetails[i]) { // not required
			continue
		}

		if m.EarningDetails[i] != nil {
			if err := m.EarningDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("earning_details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("earning_details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalaryStatementRequest) validateMailaddressOfEmployee(formats strfmt.Registry) error {

	if err := validate.Required("mailaddressOfEmployee", "body", m.MailaddressOfEmployee); err != nil {
		return err
	}

	return nil
}

func (m *SalaryStatementRequest) validateNominal(formats strfmt.Registry) error {

	if err := validate.Required("nominal", "body", m.Nominal); err != nil {
		return err
	}

	return nil
}

func (m *SalaryStatementRequest) validateNominalOfDeduction(formats strfmt.Registry) error {

	if err := validate.Required("nominal_of_deduction", "body", m.NominalOfDeduction); err != nil {
		return err
	}

	return nil
}

func (m *SalaryStatementRequest) validateNominalOfEarning(formats strfmt.Registry) error {

	if err := validate.Required("nominal_of_earning", "body", m.NominalOfEarning); err != nil {
		return err
	}

	return nil
}

func (m *SalaryStatementRequest) validatePayday(formats strfmt.Registry) error {

	if err := validate.Required("payday", "body", m.Payday); err != nil {
		return err
	}

	if err := validate.FormatOf("payday", "body", "date-time", m.Payday.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SalaryStatementRequest) validateTargetPeriod(formats strfmt.Registry) error {

	if err := validate.Required("target_period", "body", m.TargetPeriod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this salary statement request based on the context it is used
func (m *SalaryStatementRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeductionDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEarningDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalaryStatementRequest) contextValidateDeductionDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeductionDetails); i++ {

		if m.DeductionDetails[i] != nil {

			if swag.IsZero(m.DeductionDetails[i]) { // not required
				return nil
			}

			if err := m.DeductionDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deduction_details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deduction_details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalaryStatementRequest) contextValidateEarningDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EarningDetails); i++ {

		if m.EarningDetails[i] != nil {

			if swag.IsZero(m.EarningDetails[i]) { // not required
				return nil
			}

			if err := m.EarningDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("earning_details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("earning_details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalaryStatementRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalaryStatementRequest) UnmarshalBinary(b []byte) error {
	var res SalaryStatementRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SalaryStatementRequestDeductionDetailsItems0 salary statement request deduction details items0
//
// swagger:model SalaryStatementRequestDeductionDetailsItems0
type SalaryStatementRequestDeductionDetailsItems0 struct {

	// amount of deduction detail
	AmountOfDeductionDetail int32 `json:"amount_of_deduction_detail,omitempty"`

	// nominal
	Nominal string `json:"nominal,omitempty"`
}

// Validate validates this salary statement request deduction details items0
func (m *SalaryStatementRequestDeductionDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this salary statement request deduction details items0 based on context it is used
func (m *SalaryStatementRequestDeductionDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SalaryStatementRequestDeductionDetailsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalaryStatementRequestDeductionDetailsItems0) UnmarshalBinary(b []byte) error {
	var res SalaryStatementRequestDeductionDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SalaryStatementRequestEarningDetailsItems0 salary statement request earning details items0
//
// swagger:model SalaryStatementRequestEarningDetailsItems0
type SalaryStatementRequestEarningDetailsItems0 struct {

	// amount of earning detail
	AmountOfEarningDetail int32 `json:"amount_of_earning_detail,omitempty"`

	// nominal
	Nominal string `json:"nominal,omitempty"`
}

// Validate validates this salary statement request earning details items0
func (m *SalaryStatementRequestEarningDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this salary statement request earning details items0 based on context it is used
func (m *SalaryStatementRequestEarningDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SalaryStatementRequestEarningDetailsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalaryStatementRequestEarningDetailsItems0) UnmarshalBinary(b []byte) error {
	var res SalaryStatementRequestEarningDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
