// Code generated by go-swagger; DO NOT EDIT.

package get_salary_statement_for_employee

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetEmployeeSalaryStatementHandlerFunc turns a function with the right signature into a get employee salary statement handler
type GetEmployeeSalaryStatementHandlerFunc func(GetEmployeeSalaryStatementParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEmployeeSalaryStatementHandlerFunc) Handle(params GetEmployeeSalaryStatementParams) middleware.Responder {
	mailAddress, _, _ := params.HTTPRequest.BasicAuth()
	return fn(params)
}

// GetEmployeeSalaryStatementHandler interface for that can handle valid get employee salary statement params
type GetEmployeeSalaryStatementHandler interface {
	Handle(GetEmployeeSalaryStatementParams) middleware.Responder
}

// NewGetEmployeeSalaryStatement creates a new http.Handler for the get employee salary statement operation
func NewGetEmployeeSalaryStatement(ctx *middleware.Context, handler GetEmployeeSalaryStatementHandler) *GetEmployeeSalaryStatement {
	return &GetEmployeeSalaryStatement{Context: ctx, Handler: handler}
}

/*
	GetEmployeeSalaryStatement swagger:route GET /employee/salary_statement get_salary_statement_for_employee getEmployeeSalaryStatement

従業員が特定の年月の給料明細書を取得するためのAPI
*/
type GetEmployeeSalaryStatement struct {
	Context *middleware.Context
	Handler GetEmployeeSalaryStatementHandler
}

func (o *GetEmployeeSalaryStatement) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetEmployeeSalaryStatementParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
