// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetEmployeeSalaryStatementsHandlerFunc turns a function with the right signature into a get employee salary statements handler
type GetEmployeeSalaryStatementsHandlerFunc func(GetEmployeeSalaryStatementsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEmployeeSalaryStatementsHandlerFunc) Handle(params GetEmployeeSalaryStatementsParams) middleware.Responder {
	return fn(params)
}

// GetEmployeeSalaryStatementsHandler interface for that can handle valid get employee salary statements params
type GetEmployeeSalaryStatementsHandler interface {
	Handle(GetEmployeeSalaryStatementsParams) middleware.Responder
}

// NewGetEmployeeSalaryStatements creates a new http.Handler for the get employee salary statements operation
func NewGetEmployeeSalaryStatements(ctx *middleware.Context, handler GetEmployeeSalaryStatementsHandler) *GetEmployeeSalaryStatements {
	return &GetEmployeeSalaryStatements{Context: ctx, Handler: handler}
}

/*
	GetEmployeeSalaryStatements swagger:route GET /employee/salary_statements getEmployeeSalaryStatements

今までもらった給料明細の一覧を取得するための従業員向けAPI
*/
type GetEmployeeSalaryStatements struct {
	Context *middleware.Context
	Handler GetEmployeeSalaryStatementsHandler
}

func (o *GetEmployeeSalaryStatements) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetEmployeeSalaryStatementsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetEmployeeSalaryStatementsInternalServerErrorBody get employee salary statements internal server error body
//
// swagger:model GetEmployeeSalaryStatementsInternalServerErrorBody
type GetEmployeeSalaryStatementsInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get employee salary statements internal server error body
func (o *GetEmployeeSalaryStatementsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get employee salary statements internal server error body based on context it is used
func (o *GetEmployeeSalaryStatementsInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetEmployeeSalaryStatementsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEmployeeSalaryStatementsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetEmployeeSalaryStatementsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetEmployeeSalaryStatementsOKBody get employee salary statements o k body
//
// swagger:model GetEmployeeSalaryStatementsOKBody
type GetEmployeeSalaryStatementsOKBody struct {

	// 従業員名
	NameOfEmployee string `json:"name_of_employee,omitempty"`

	// salary statements
	SalaryStatements []*GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0 `json:"salary_statements"`
}

// Validate validates this get employee salary statements o k body
func (o *GetEmployeeSalaryStatementsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSalaryStatements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEmployeeSalaryStatementsOKBody) validateSalaryStatements(formats strfmt.Registry) error {
	if swag.IsZero(o.SalaryStatements) { // not required
		return nil
	}

	for i := 0; i < len(o.SalaryStatements); i++ {
		if swag.IsZero(o.SalaryStatements[i]) { // not required
			continue
		}

		if o.SalaryStatements[i] != nil {
			if err := o.SalaryStatements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getEmployeeSalaryStatementsOK" + "." + "salary_statements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getEmployeeSalaryStatementsOK" + "." + "salary_statements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get employee salary statements o k body based on the context it is used
func (o *GetEmployeeSalaryStatementsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSalaryStatements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEmployeeSalaryStatementsOKBody) contextValidateSalaryStatements(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.SalaryStatements); i++ {

		if o.SalaryStatements[i] != nil {
			if err := o.SalaryStatements[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getEmployeeSalaryStatementsOK" + "." + "salary_statements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getEmployeeSalaryStatementsOK" + "." + "salary_statements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetEmployeeSalaryStatementsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEmployeeSalaryStatementsOKBody) UnmarshalBinary(b []byte) error {
	var res GetEmployeeSalaryStatementsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0 get employee salary statements o k body salary statements items0
//
// swagger:model GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0
type GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0 struct {

	// 控除の総額
	AmountOfDeduction int32 `json:"amount_of_deduction,omitempty"`

	// 支給の総額
	AmountOfEarning int32 `json:"amount_of_earning,omitempty"`

	// deduction details
	DeductionDetails []*GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0DeductionDetailsItems0 `json:"deduction_details"`

	// earning details
	EarningDetails []*GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0EarningDetailsItems0 `json:"earning_details"`

	// 給料明細の名目
	Nominal string `json:"nominal,omitempty"`

	// 給料支払い日時
	// Format: date-time
	Payday strfmt.DateTime `json:"payday,omitempty"`

	// 給料明細の対象期間
	TargetPeriod string `json:"target_period,omitempty"`
}

// Validate validates this get employee salary statements o k body salary statements items0
func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeductionDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEarningDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePayday(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0) validateDeductionDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.DeductionDetails) { // not required
		return nil
	}

	for i := 0; i < len(o.DeductionDetails); i++ {
		if swag.IsZero(o.DeductionDetails[i]) { // not required
			continue
		}

		if o.DeductionDetails[i] != nil {
			if err := o.DeductionDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deduction_details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deduction_details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0) validateEarningDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.EarningDetails) { // not required
		return nil
	}

	for i := 0; i < len(o.EarningDetails); i++ {
		if swag.IsZero(o.EarningDetails[i]) { // not required
			continue
		}

		if o.EarningDetails[i] != nil {
			if err := o.EarningDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("earning_details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("earning_details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0) validatePayday(formats strfmt.Registry) error {
	if swag.IsZero(o.Payday) { // not required
		return nil
	}

	if err := validate.FormatOf("payday", "body", "date-time", o.Payday.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get employee salary statements o k body salary statements items0 based on the context it is used
func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDeductionDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateEarningDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0) contextValidateDeductionDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.DeductionDetails); i++ {

		if o.DeductionDetails[i] != nil {
			if err := o.DeductionDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deduction_details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deduction_details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0) contextValidateEarningDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.EarningDetails); i++ {

		if o.EarningDetails[i] != nil {
			if err := o.EarningDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("earning_details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("earning_details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0) UnmarshalBinary(b []byte) error {
	var res GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0DeductionDetailsItems0 get employee salary statements o k body salary statements items0 deduction details items0
//
// swagger:model GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0DeductionDetailsItems0
type GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0DeductionDetailsItems0 struct {

	// 控除詳細の総額
	AmountOfDeductionDetail int32 `json:"amount_of_deduction_detail,omitempty"`

	// 控除詳細の名目
	Nominal string `json:"nominal,omitempty"`
}

// Validate validates this get employee salary statements o k body salary statements items0 deduction details items0
func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0DeductionDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get employee salary statements o k body salary statements items0 deduction details items0 based on context it is used
func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0DeductionDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0DeductionDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0DeductionDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0DeductionDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0EarningDetailsItems0 get employee salary statements o k body salary statements items0 earning details items0
//
// swagger:model GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0EarningDetailsItems0
type GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0EarningDetailsItems0 struct {

	// 支給詳細の総額
	AmountOfEarningDetail int32 `json:"amount_of_earning_detail,omitempty"`

	// 支給詳細の名目
	Nominal string `json:"nominal,omitempty"`
}

// Validate validates this get employee salary statements o k body salary statements items0 earning details items0
func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0EarningDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get employee salary statements o k body salary statements items0 earning details items0 based on context it is used
func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0EarningDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0EarningDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0EarningDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetEmployeeSalaryStatementsOKBodySalaryStatementsItems0EarningDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetEmployeeSalaryStatementsUnauthorizedBody get employee salary statements unauthorized body
//
// swagger:model GetEmployeeSalaryStatementsUnauthorizedBody
type GetEmployeeSalaryStatementsUnauthorizedBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get employee salary statements unauthorized body
func (o *GetEmployeeSalaryStatementsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get employee salary statements unauthorized body based on context it is used
func (o *GetEmployeeSalaryStatementsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetEmployeeSalaryStatementsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEmployeeSalaryStatementsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetEmployeeSalaryStatementsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
