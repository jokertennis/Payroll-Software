// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetEmployeeProtectedOKCode is the HTTP code returned for type GetEmployeeProtectedOK
const GetEmployeeProtectedOKCode int = 200

/*
GetEmployeeProtectedOK OK

swagger:response getEmployeeProtectedOK
*/
type GetEmployeeProtectedOK struct {

	/*
	  In: Body
	*/
	Payload *GetEmployeeProtectedOKBody `json:"body,omitempty"`
}

// NewGetEmployeeProtectedOK creates GetEmployeeProtectedOK with default headers values
func NewGetEmployeeProtectedOK() *GetEmployeeProtectedOK {

	return &GetEmployeeProtectedOK{}
}

// WithPayload adds the payload to the get employee protected o k response
func (o *GetEmployeeProtectedOK) WithPayload(payload *GetEmployeeProtectedOKBody) *GetEmployeeProtectedOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get employee protected o k response
func (o *GetEmployeeProtectedOK) SetPayload(payload *GetEmployeeProtectedOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetEmployeeProtectedOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetEmployeeProtectedUnauthorizedCode is the HTTP code returned for type GetEmployeeProtectedUnauthorized
const GetEmployeeProtectedUnauthorizedCode int = 401

/*
GetEmployeeProtectedUnauthorized Unauthorized

swagger:response getEmployeeProtectedUnauthorized
*/
type GetEmployeeProtectedUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *GetEmployeeProtectedUnauthorizedBody `json:"body,omitempty"`
}

// NewGetEmployeeProtectedUnauthorized creates GetEmployeeProtectedUnauthorized with default headers values
func NewGetEmployeeProtectedUnauthorized() *GetEmployeeProtectedUnauthorized {

	return &GetEmployeeProtectedUnauthorized{}
}

// WithPayload adds the payload to the get employee protected unauthorized response
func (o *GetEmployeeProtectedUnauthorized) WithPayload(payload *GetEmployeeProtectedUnauthorizedBody) *GetEmployeeProtectedUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get employee protected unauthorized response
func (o *GetEmployeeProtectedUnauthorized) SetPayload(payload *GetEmployeeProtectedUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetEmployeeProtectedUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetEmployeeProtectedInternalServerErrorCode is the HTTP code returned for type GetEmployeeProtectedInternalServerError
const GetEmployeeProtectedInternalServerErrorCode int = 500

/*
GetEmployeeProtectedInternalServerError Internal Server Error

swagger:response getEmployeeProtectedInternalServerError
*/
type GetEmployeeProtectedInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *GetEmployeeProtectedInternalServerErrorBody `json:"body,omitempty"`
}

// NewGetEmployeeProtectedInternalServerError creates GetEmployeeProtectedInternalServerError with default headers values
func NewGetEmployeeProtectedInternalServerError() *GetEmployeeProtectedInternalServerError {

	return &GetEmployeeProtectedInternalServerError{}
}

// WithPayload adds the payload to the get employee protected internal server error response
func (o *GetEmployeeProtectedInternalServerError) WithPayload(payload *GetEmployeeProtectedInternalServerErrorBody) *GetEmployeeProtectedInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get employee protected internal server error response
func (o *GetEmployeeProtectedInternalServerError) SetPayload(payload *GetEmployeeProtectedInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetEmployeeProtectedInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
